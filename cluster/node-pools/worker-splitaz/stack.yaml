AWSTemplateFormatVersion: 2010-09-09
Description: Kubernetes default worker node pool

Mappings:
  Images:
    eu-central-1:
      MachineImage: '{{ .Cluster.ConfigItems.kuberuntu_image_v1_18 }}'

Resources:
{{ with $data := . }}
{{ with $azCount := len $data.Values.availability_zones }}
{{ range $az := $data.Values.availability_zones }}
{{ with $azID := azID $az }}
  AutoScalingGroup{{$azID}}:
    CreationPolicy:
      ResourceSignal:
        Count: '0'
        Timeout: PT15M
    Properties:
      HealthCheckGracePeriod: 300
      HealthCheckType: EC2
{{ if gt (len $data.NodePool.InstanceTypes) 1 }}
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity: {{if $data.NodePool.IsSpot }}0{{else}}100{{end}}
          SpotAllocationStrategy: "{{ $data.NodePool.ConfigItems.spot_allocation_strategy }}"
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate
            Version: !GetAtt LaunchTemplate.LatestVersionNumber
          Overrides:
{{ range $type := $data.NodePool.InstanceTypes }}
            - InstanceType: "{{ $type }}"
{{ end }}
{{ else }}
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
{{ end }}
      MinSize: '{{ asgSize $data.NodePool.MinSize $azCount }}'
      MaxSize: '{{ asgSize $data.NodePool.MaxSize $azCount }}'
      Tags:
      - Key: InfrastructureComponent
        Value: true
        PropagateAtLaunch: true
      - Key: Name
        PropagateAtLaunch: true
        Value: "{{ $data.NodePool.Name }} ({{ $data.Cluster.ID }})"
      - Key: k8s.io/role/node
        PropagateAtLaunch: true
        Value: worker
      - Key: node.kubernetes.io/role
        PropagateAtLaunch: true
        Value: worker
# only node pools without taints should be attached to Ingress Load balancer
{{- if or (not (index $data.NodePool.ConfigItems "taints")) (eq (index $data.NodePool.ConfigItems "taints") "dedicated=skipper-ingress:NoSchedule") }}
      - Key: zalando.org/ingress-enabled
        Value: "true"
        PropagateAtLaunch: true
{{- end }}
      - Key: k8s.io/cluster-autoscaler/enabled
        PropagateAtLaunch: true
        Value: ''
      - Key: k8s.io/cluster-autoscaler/node-template/label/node.kubernetes.io/role
        PropagateAtLaunch: true
        Value: worker
      - Key: k8s.io/cluster-autoscaler/node-template/label/node.kubernetes.io/node-pool
        PropagateAtLaunch: true
        Value: {{ $data.NodePool.Name }}
      - Key: k8s.io/cluster-autoscaler/node-template/label/lifecycle-status
        PropagateAtLaunch: true
        Value: ready
      - Key: k8s.io/cluster-autoscaler/node-template/label/aws.amazon.com/spot
        PropagateAtLaunch: true
        Value: {{if $data.NodePool.IsSpot }}true{{else}}false{{end}}
      - Key: k8s.io/cluster-autoscaler/node-template/resources/ephemeral-storage
        PropagateAtLaunch: false
        # 40Gi for EBS storage or 95% of instance storage
        Value: "{{ $data.NodePool.AvailableStorage 42949672960 0.95 }}"
      - Key: k8s.io/cluster-autoscaler/node-template/label/zalando.org/scaling-priority
        PropagateAtLaunch: true
{{- if index $data.NodePool.ConfigItems "scaling_priority" }}
        Value: "{{ $data.NodePool.ConfigItems.scaling_priority }}"
{{- else if $data.NodePool.IsSpot }}
        Value: "1000"
{{- else }}
        Value: "0"
{{- end }}
{{- if index $data.NodePool.ConfigItems "labels"}}
  {{- range split $data.NodePool.ConfigItems.labels ","}}
    {{- $label := split . "="}}
      - Key: k8s.io/cluster-autoscaler/node-template/label/{{index $label 0}}
        PropagateAtLaunch: true
        Value: {{index $label 1}}
  {{- end}}
{{end}}
{{- if index $data.NodePool.ConfigItems "taints"}}
  {{- range split $data.NodePool.ConfigItems.taints ","}}
    {{- $taint := split . "="}}
      - Key: k8s.io/cluster-autoscaler/node-template/taint/{{index $taint 0}}
        PropagateAtLaunch: true
        Value: {{index $taint 1}}
  {{- end}}
{{end}}
      - Key: 'zalando.de/cluster-local-id/{{ $data.Cluster.LocalID }}'
        PropagateAtLaunch: true
        Value: owned
      VPCZoneIdentifier:
        - "{{ index $data.Values.subnets $az }}"
    Type: 'AWS::AutoScaling::AutoScalingGroup'
  AutoscalingLifecycleHook{{$azID}}:
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup{{$azID}}
      LifecycleHookName: "kube-node-ready-lifecycle-hook"
      DefaultResult: CONTINUE
      HeartbeatTimeout: '600'
      LifecycleTransition: 'autoscaling:EC2_INSTANCE_LAUNCHING'
    Type: 'AWS::AutoScaling::LifecycleHook'
{{ end }}
{{ end }}
{{ end }}
  LaunchTemplate:
    Properties:
      LaunchTemplateName: '{{ $data.Cluster.LocalID }}-{{ $data.NodePool.Name }}'
      LaunchTemplateData:
{{ if ne $data.NodePool.ConfigItems.ebs_root_volume_size "50" }}
        BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            VolumeSize: {{$data.NodePool.ConfigItems.ebs_root_volume_size}}
{{ end }}
        NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: true
          Groups:
          - !ImportValue '{{ .Cluster.ID }}:worker-security-group'
        EbsOptimized: false
        IamInstanceProfile:
          Name: !Ref AutoScalingInstanceProfile
        InstanceInitiatedShutdownBehavior: terminate
        ImageId: !FindInMap
        - Images
        - !Ref 'AWS::Region'
        - MachineImage
        InstanceType: "{{ index .NodePool.InstanceTypes 0 }}"
{{- if and $data.NodePool.IsSpot (eq (len $data.NodePool.InstanceTypes) 1) }}
        InstanceMarketOptions:
          MarketType: spot
{{ end }}
        UserData: "{{ .UserData }}"
    Type: 'AWS::EC2::LaunchTemplate'
{{ end }}

  AutoScalingInstanceProfile:
    Properties:
      Path: /
      Roles:
      - !ImportValue '{{ .Cluster.ID }}:worker-iam-role'
    Type: 'AWS::IAM::InstanceProfile'
