Description: Kubernetes cluster
SenzaInfo:
    StackName: "{{Arguments.StackName}}"
    Parameters:
      - StackName:
          Description: "Stack name"
      - UserDataMaster:
          Description: "User data of master"
      - UserDataWorker:
          Description: "User data of worker"
      - KmsKey:
          Description: "ARN of KMS key to decrypt secrets"
      - MasterNodes:
          Description: "Number of master nodes"
      - WorkerNodes:
          Description: "Number of worker nodes"
      - MinimumWorkerNodes:
          Description: "Minimum number of nodes in the worker ASG"
      - MaximumWorkerNodes:
          Description: "Maximum number of nodes in the worker ASG"
      - MasterInstanceType:
          Description: "Type of instance for master nodes"
          Default: "m3.medium"
      - InstanceType:
          Description: "Type of instance"
      - ClusterID:
          Description: "ID of the cluster"
      - HostedZone:
          Description: "Hosted DNS zone"
      - MasterNodePoolName:
          Description: "Name of the master node pool (ASG)"
      - WorkerNodePoolName:
          Description: "Name of the worker node pool (ASG)"
      - EtcdS3BackupBucket:
          Description: "Name of the S3 bucket used for etcd backups"

SenzaComponents:
  - Configuration:
      Type: Senza::CoreosAutoConfiguration
      PublicOnly: true # use all public subnets
      DefineParameters: false # skip CF template parameter definition
      ReleaseChannel: stable # see https://coreos.com/os/docs/latest/switching-channels.html
  - MasterLoadBalancer:
      Type: Senza::WeightedDnsElasticLoadBalancer
      HTTPPort: 443
      HealthCheckPath: /healthz
      HealthCheckPort: 8080
      SecurityGroups:
        - {Ref: MasterLoadBalancerSecurityGroup}
      Scheme: internet-facing
      Listeners:
        - PolicyNames: []
          Protocol: SSL
          InstanceProtocol: SSL
          InstancePort: 443
          LoadBalancerPort: 443
      ConnectionSettings:
        IdleTimeout: 300
      VersionDomain: "{{SenzaInfo.StackName}}-{{SenzaInfo.StackVersion}}.{{Arguments.HostedZone}}"
      MainDomain: "{{SenzaInfo.StackName}}.{{Arguments.HostedZone}}"
      Tags:
        - Key: "kubernetes.io/cluster/{{ Arguments.ClusterID }}"
          Value: owned
  - MasterAutoScaling:
      Type: Senza::AutoScalingGroup
      InstanceType: "{{ Arguments.MasterInstanceType }}"
      Image: LatestCoreOSImage
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
            VolumeType: standard
      SecurityGroups:
         - {Ref: MasterSecurityGroup}
      IamRoles:
         - {Ref: MasterIAMRole}
      ElasticLoadBalancer: MasterLoadBalancer
      HealthCheckGracePeriod: 480 # give master node up to 8 min to start up
      HealthCheckType: EC2
      AssociatePublicIpAddress: true
      UserData: "{{ Arguments.UserDataMaster }}"
      AutoScaling:
         Minimum: "{{ Arguments.MasterNodes }}"
         Maximum: "{{ Arguments.MasterNodes }}"
         DesiredCapacity: "{{ Arguments.MasterNodes }}"
         SuccessRequires: "0 within 15m"
      Tags:
        - Key: "kubernetes.io/cluster/{{ Arguments.ClusterID }}"
          Value: owned
        - Key: "NodePool"
          Value: "{{ Arguments.MasterNodePoolName }}"
  - WorkerAutoScaling:
      Type: Senza::AutoScalingGroup
      InstanceType: "{{ Arguments.InstanceType }}"
      Image: LatestCoreOSImage
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 50
            VolumeType: standard
      SecurityGroups:
         - {Ref: WorkerSecurityGroup}
      IamRoles:
         - {Ref: WorkerIAMRole}
      AssociatePublicIpAddress: true
      UserData: "{{ Arguments.UserDataWorker }}"
      AutoScaling:
         Minimum: "{{ Arguments.MinimumWorkerNodes}}"
         Maximum: "{{ Arguments.MaximumWorkerNodes}}"
         DesiredCapacity: "{{ Arguments.WorkerNodes }}"
         SuccessRequires: "0 within 15m"
      Tags:
        - Key: "kubernetes.io/cluster/{{ Arguments.ClusterID }}"
          Value: owned
        - Key: "NodePool"
          Value: "{{ Arguments.WorkerNodePoolName }}"
Resources:
  MasterIAMRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - {Action: 'ec2:*', Effect: Allow, Resource: '*'}
          - {Action: 'elasticloadbalancing:*', Effect: Allow, Resource: '*'}
          - {Action: 'kms:Decrypt', Effect: Allow, Resource: '{{ Arguments.KmsKey }}'}
          Version: '2012-10-17'
        PolicyName: root
    Type: AWS::IAM::Role
  WorkerIAMRole:
    Properties:
      RoleName: "{{SenzaInfo.StackName}}-{{SenzaInfo.StackVersion}}-worker"
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - {Action: 'ec2:Describe*', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:AttachVolume', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:DetachVolume', Effect: Allow, Resource: '*'}
          - {Action: 'kms:Decrypt', Effect: Allow, Resource: '{{ Arguments.KmsKey }}'}
          - {Action: 'sts:AssumeRole', Effect: Allow, Resource: '*'}
          Version: '2012-10-17'
        PolicyName: root
    Type: AWS::IAM::Role
  AutoscalerIAMRole:
    Properties:
      RoleName: "{{SenzaInfo.StackName}}-{{SenzaInfo.StackVersion}}-app-autoscaler"
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            AWS:
              Fn::Join:
                - ""
                -
                  - arn:aws:iam::{{ AccountInfo.AccountID }}:role/
                  -
                    Ref: WorkerIAMRole
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - {Action: 'ec2:Describe*', Effect: Allow, Resource: '*'}
          - {Action: 'autoscaling:DescribeAutoScalingGroups', Effect: Allow, Resource: '*'}
          - {Action: 'autoscaling:DescribeAutoScalingInstances', Effect: Allow, Resource: '*'}
          - {Action: 'autoscaling:DescribeScalingActivities', Effect: Allow, Resource: '*'}
          - {Action: 'autoscaling:SetDesiredCapacity', Effect: Allow, Resource: '*'}
          - {Action: 'autoscaling:TerminateInstanceInAutoScalingGroup', Effect: Allow, Resource: '*'}
          Version: '2012-10-17'
        PolicyName: root
    Type: AWS::IAM::Role
  ExternalDNSIAMRole:
    Properties:
      RoleName: "{{SenzaInfo.StackName}}-{{SenzaInfo.StackVersion}}-app-external-dns"
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            AWS:
              Fn::Join:
                - ""
                -
                  - arn:aws:iam::{{ AccountInfo.AccountID }}:role/
                  -
                    Ref: WorkerIAMRole
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - {Action: 'route53:*', Effect: Allow, Resource: '*'}
          Version: '2012-10-17'
        PolicyName: root
    Type: AWS::IAM::Role
  IngressControllerIAMRole:
    Properties:
      RoleName: "{{SenzaInfo.StackName}}-{{SenzaInfo.StackVersion}}-app-ingr-ctrl"
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            AWS:
              Fn::Join:
                - ""
                -
                  - arn:aws:iam::{{ AccountInfo.AccountID }}:role/
                  -
                    Ref: WorkerIAMRole
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - {Action: 'acm:ListCertificates', Effect: Allow, Resource: '*'}
          - {Action: 'acm:DescribeCertificate', Effect: Allow, Resource: '*'}
          - {Action: 'autoscaling:DescribeAutoScalingGroups', Effect: Allow, Resource: '*'}
          - {Action: 'autoscaling:AttachLoadBalancers', Effect: Allow, Resource: '*'}
          - {Action: 'autoscaling:DetachLoadBalancers', Effect: Allow, Resource: '*'}
          - {Action: 'autoscaling:DetachLoadBalancerTargetGroups', Effect: Allow, Resource: '*'}
          - {Action: 'autoscaling:AttachLoadBalancerTargetGroups', Effect: Allow, Resource: '*'}
          - {Action: 'cloudformation:*', Effect: Allow, Resource: '*'}
          - {Action: 'elasticloadbalancing:*', Effect: Allow, Resource: '*'}
          - {Action: 'elasticloadbalancingv2:*', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:DescribeInstances', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:DescribeSubnets', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:DescribeSecurityGroups', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:DescribeRouteTables', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:DescribeVpcs', Effect: Allow, Resource: '*'}
          - {Action: 'iam:GetServerCertificate', Effect: Allow, Resource: '*'}
          - {Action: 'iam:ListServerCertificates', Effect: Allow, Resource: '*'}
          Version: '2012-10-17'
        PolicyName: root
    Type: AWS::IAM::Role
  StaticEgressControllerIAMRole:
    Properties:
      RoleName: "{{SenzaInfo.StackName}}-{{SenzaInfo.StackVersion}}-static-egress-controller"
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            AWS:
              Fn::Join:
                - ""
                -
                  - arn:aws:iam::{{ AccountInfo.AccountID }}:role/
                  -
                    Ref: WorkerIAMRole
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - {Action: 'cloudformation:*', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:AllocateAddress', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:AssociateRouteTable', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:DisassociateRouteTable', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:CreateRouteTable', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:CreateRoute', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:CreateNatGateway', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:CreateSubnet', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:CreateTags', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:ReleaseAddress', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:DeleteRouteTable', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:DeleteRoute', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:DeleteNatGateway', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:DeleteSubnet', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:DescribeAddresses', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:DescribeInternetGateways', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:DescribeRouteTables', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:DescribeNatGateways', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:DescribeSubnets', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:DescribeVpcs', Effect: Allow, Resource: '*'}
          Version: '2012-10-17'
        PolicyName: root
    Type: AWS::IAM::Role

  MasterSecurityGroup:
    Properties:
      GroupDescription: {Ref: 'AWS::StackName'}
      SecurityGroupIngress:
      - {CidrIp: 0.0.0.0/0, FromPort: -1, IpProtocol: icmp, ToPort: -1}
      - {CidrIp: 0.0.0.0/0, FromPort: 22, IpProtocol: tcp, ToPort: 22}
      - {CidrIp: 172.31.0.0/16, FromPort: 8082, IpProtocol: tcp, ToPort: 8082}
      - {CidrIp: 172.31.0.0/16, FromPort: 8083, IpProtocol: tcp, ToPort: 8083}
      - {CidrIp: 172.31.0.0/16, FromPort: 9100, IpProtocol: tcp, ToPort: 9100}
      - {CidrIp: 172.31.0.0/16, FromPort: 9911, IpProtocol: tcp, ToPort: 9911}
      - {CidrIp: 172.31.0.0/16, FromPort: 30080, IpProtocol: tcp, ToPort: 30080}
      Tags:
        - Key: "kubernetes.io/cluster/{{ Arguments.ClusterID }}"
          Value: owned
      VpcId: "{{ AccountInfo.VpcID }}"
    Type: AWS::EC2::SecurityGroup
  MasterLoadBalancerSecurityGroup:
    Properties:
      GroupDescription: {Ref: 'AWS::StackName'}
      SecurityGroupIngress:
      - {CidrIp: 0.0.0.0/0, FromPort: -1, IpProtocol: icmp, ToPort: -1}
      - {CidrIp: 0.0.0.0/0, FromPort: 443, IpProtocol: tcp, ToPort: 443}
      Tags:
        - Key: "kubernetes.io/cluster/{{ Arguments.ClusterID }}"
          Value: owned
      VpcId: "{{ AccountInfo.VpcID }}"
    Type: AWS::EC2::SecurityGroup
  MasterSecurityGroupIngressFromLoadBalancerHealthCheck:
    Properties:
      FromPort: 8080
      GroupId: {Ref: MasterSecurityGroup}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: MasterLoadBalancerSecurityGroup}
      ToPort: 8080
      Tags:
        - Key: "kubernetes.io/cluster/{{ Arguments.ClusterID }}"
          Value: owned
    Type: AWS::EC2::SecurityGroupIngress
  MasterSecurityGroupIngressFromLoadBalancer:
    Properties:
      FromPort: 443
      GroupId: {Ref: MasterSecurityGroup}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: MasterLoadBalancerSecurityGroup}
      ToPort: 443
      Tags:
        - Key: "kubernetes.io/cluster/{{ Arguments.ClusterID }}"
          Value: owned
    Type: AWS::EC2::SecurityGroupIngress
  MasterSecurityGroupIngressFromMaster:
    Properties:
      FromPort: 443
      GroupId: {Ref: MasterSecurityGroup}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: MasterSecurityGroup}
      ToPort: 443
      Tags:
        - Key: "kubernetes.io/cluster/{{ Arguments.ClusterID }}"
          Value: owned
    Type: AWS::EC2::SecurityGroupIngress
  MasterKubeletToMasterKubeletSecurityGroup:
    Properties:
      FromPort: 10250
      GroupId: {Ref: MasterSecurityGroup}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: MasterSecurityGroup}
      ToPort: 10250
      Tags:
        - Key: "kubernetes.io/cluster/{{ Arguments.ClusterID }}"
          Value: owned
    Type: AWS::EC2::SecurityGroupIngress
  WorkerSecurityGroup:
    Properties:
      GroupDescription: {Ref: 'AWS::StackName'}
      SecurityGroupIngress:
      - {CidrIp: 0.0.0.0/0, FromPort: -1, IpProtocol: icmp, ToPort: -1}
      - {CidrIp: 0.0.0.0/0, FromPort: 22, IpProtocol: tcp, ToPort: 22}
      - {CidrIp: 172.31.0.0/16, FromPort: 9999, IpProtocol: tcp, ToPort: 9999}
      - {CidrIp: 172.31.0.0/16, FromPort: 9100, IpProtocol: tcp, ToPort: 9100}
      # allow checking kubelet healthz port from within the VPC
      - {CidrIp: 172.31.0.0/16, FromPort: 10248, IpProtocol: tcp, ToPort: 10248}
      # allow default service NodePort range
      - {CidrIp: 172.31.0.0/16, FromPort: 30000, IpProtocol: tcp, ToPort: 32767}
      Tags:
        - Key: "kubernetes.io/cluster/{{ Arguments.ClusterID }}"
          Value: owned
      VpcId: "{{ AccountInfo.VpcID }}"
    Type: AWS::EC2::SecurityGroup

  IngressLoadBalancerSecurityGroup:
    Properties:
      GroupDescription: {Ref: 'AWS::StackName'}
      SecurityGroupIngress:
      - {CidrIp: 0.0.0.0/0, FromPort: 80, IpProtocol: tcp, ToPort: 80}
      - {CidrIp: 0.0.0.0/0, FromPort: 443, IpProtocol: tcp, ToPort: 443}
      VpcId: "{{ AccountInfo.VpcID }}"
      Tags:
        - Key: "kubernetes.io/cluster/{{ Arguments.ClusterID }}"
          Value: owned
        - Key: "kubernetes:application"
          Value: "kube-ingress-aws-controller"
    Type: AWS::EC2::SecurityGroup

  MasterSecurityGroupIngressFromWorker:
    Properties:
      FromPort: 443
      GroupId: {Ref: MasterSecurityGroup}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: WorkerSecurityGroup}
      ToPort: 443
      Tags:
        - Key: "kubernetes.io/cluster/{{ Arguments.ClusterID }}"
          Value: owned
    Type: AWS::EC2::SecurityGroupIngress
  WorkerSecurityGroupIngressFromMasterToFlannel:
    Properties:
      FromPort: 8472
      GroupId: {Ref: WorkerSecurityGroup}
      IpProtocol: udp
      SourceSecurityGroupId: {Ref: MasterSecurityGroup}
      ToPort: 8472
      Tags:
        - Key: "kubernetes.io/cluster/{{ Arguments.ClusterID }}"
          Value: owned
    Type: AWS::EC2::SecurityGroupIngress
  WorkerSecurityGroupIngressFromMasterToKubelet:
    Properties:
      FromPort: 10250
      GroupId: {Ref: WorkerSecurityGroup}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: MasterSecurityGroup}
      ToPort: 10250
      Tags:
        - Key: "kubernetes.io/cluster/{{ Arguments.ClusterID }}"
          Value: owned
    Type: AWS::EC2::SecurityGroupIngress
  WorkerSecurityGroupIngressFromMasterTocAdvisor:
    Properties:
      FromPort: 4194
      GroupId: {Ref: WorkerSecurityGroup}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: MasterSecurityGroup}
      ToPort: 4194
      Tags:
        - Key: "kubernetes.io/cluster/{{ Arguments.ClusterID }}"
          Value: owned
    Type: AWS::EC2::SecurityGroupIngress
  MasterSecurityGroupIngressFromFlannelToMaster:
    Properties:
      FromPort: 8472
      GroupId: {Ref: MasterSecurityGroup}
      IpProtocol: udp
      SourceSecurityGroupId: {Ref: WorkerSecurityGroup}
      ToPort: 8472
      Tags:
        - Key: "kubernetes.io/cluster/{{ Arguments.ClusterID }}"
          Value: owned
    Type: AWS::EC2::SecurityGroupIngress
  MasterSecurityGroupIngressFromWorkerToMasterKubeletReadOnly:
    Properties:
      FromPort: 10255
      GroupId: {Ref: MasterSecurityGroup}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: WorkerSecurityGroup}
      ToPort: 10255
      Tags:
        - Key: "kubernetes.io/cluster/{{ Arguments.ClusterID }}"
          Value: owned
    Type: AWS::EC2::SecurityGroupIngress
  WorkerSecurityGroupIngressFromWorkerToFlannel:
    Properties:
      FromPort: 8472
      GroupId: {Ref: WorkerSecurityGroup}
      IpProtocol: udp
      SourceSecurityGroupId: {Ref: WorkerSecurityGroup}
      ToPort: 8472
      Tags:
        - Key: "kubernetes.io/cluster/{{ Arguments.ClusterID }}"
          Value: owned
    Type: AWS::EC2::SecurityGroupIngress
  WorkerSecurityGroupIngressFromWorkerToWorkerKubeletReadOnly:
    Properties:
      FromPort: 10255
      GroupId: {Ref: WorkerSecurityGroup}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: WorkerSecurityGroup}
      ToPort: 10255
      Tags:
        - Key: "kubernetes.io/cluster/{{ Arguments.ClusterID }}"
          Value: owned
    Type: AWS::EC2::SecurityGroupIngress
  WorkerSecurityGroupIngressFromWorkerToWorkerSkipperMetrics:
    Properties:
      FromPort: 9911
      GroupId: {Ref: WorkerSecurityGroup}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: WorkerSecurityGroup}
      ToPort: 9911
      Tags:
        - Key: "kubernetes.io/cluster/{{ Arguments.ClusterID }}"
          Value: owned
    Type: AWS::EC2::SecurityGroupIngress

  ZmonIAMRole:
    Properties:
      RoleName: "{{SenzaInfo.StackName}}-{{SenzaInfo.StackVersion}}-app-zmon"
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            AWS:
              Fn::Join:
                - ""
                -
                  - arn:aws:iam::{{ AccountInfo.AccountID }}:role/
                  -
                    Ref: WorkerIAMRole
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
            - {Action: 'acm:DescribeCertificate', Effect: Allow, Resource: '*'}
            - {Action: 'acm:ListCertificates', Effect: Allow, Resource: '*'}
            - {Action: 'autoscaling:Describe*', Effect: Allow, Resource: '*'}
            - {Action: 'cloudformation:Describe*', Effect: Allow, Resource: '*'}
            - {Action: 'cloudformation:List*', Effect: Allow, Resource: '*'}
            - {Action: 'cloudwatch:Describe*', Effect: Allow, Resource: '*'}
            - {Action: 'cloudwatch:Get*', Effect: Allow, Resource: '*'}
            - {Action: 'cloudwatch:List*', Effect: Allow, Resource: '*'}
            - {Action: 'ec2:Describe*', Effect: Allow, Resource: '*'}
            - {Action: 'elasticache:Describe*', Effect: Allow, Resource: '*'}
            - {Action: 'elasticloadbalancing:Describe*', Effect: Allow, Resource: '*'}
            - {Action: 'iam:Get*', Effect: Allow, Resource: '*'}
            - {Action: 'iam:List*', Effect: Allow, Resource: '*'}
            - {Action: 'kinesis:Describe*', Effect: Allow, Resource: '*'}
            - {Action: 'opsworks:Describe*', Effect: Allow, Resource: '*'}
            - {Action: 'rds:Describe*', Effect: Allow, Resource: '*'}
            - {Action: 'rds:ListTagsForResource', Effect: Allow, Resource: '*'}
            - {Action: 'route53:Get*', Effect: Allow, Resource: '*'}
            - {Action: 'route53:List*', Effect: Allow, Resource: '*'}
            - {Action: 'tag:Get*', Effect: Allow, Resource: '*'}
            - {Action: 'dynamodb:ListTables', Effect: Allow, Resource: '*'}
            - {Action: 's3:ListBucket', Effect: Allow, Resource: '*'}
            - Action: "s3:GetObject"
              Resource: "arn:aws:s3:::{{ AccountInfo.MintBucket }}/gerry/*"
              Effect: Allow
            - {Action: 'sqs:GetQueueAttributes', Effect: Allow, Resource: '*'}
            - {Action: 'sqs:ListDeadLetterSourceQueues', Effect: Allow, Resource: '*'}
            - {Action: 'sqs:ListQueues', Effect: Allow, Resource: '*'}
          Version: '2012-10-17'
        PolicyName: root
    Type: AWS::IAM::Role
  DeploymentIAMRole:
    Properties:
      RoleName: "{{SenzaInfo.StackName}}-{{SenzaInfo.StackVersion}}-deployment"
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            AWS:
              Fn::Join:
                - ""
                -
                  - arn:aws:iam::{{ AccountInfo.AccountID }}:role/
                  -
                    Ref: WorkerIAMRole
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Effect: "Deny"
            Action:
            - "ec2:*"
            Resource: "*"
            Condition:
              StringLike:
                ec2:Region:
                - "us-*"
                - "ap-*"
                - "sa-*"
          - Effect: "Deny"
            Action:
            - "iam:Update*"
            - "iam:Put*"
            - "iam:Create*"
            - "iam:Delete*"
            - "iam:Attach*"
            - "iam:Detach*"
            Resource: "arn:aws:iam::*:role/Shibboleth*"
          - Effect: "Deny"
            Action:
            - "ec2:DeleteRoute"
            - "ec2:DeleteRouteTable"
            - "ec2:DeleteSubnet"
            - "ec2:DeleteVpc"
            - "ec2:DeleteVpcPeeringConnection"
            - "ec2:DeleteVpnConnection"
            - "ec2:DeleteVpnConnectionRoute"
            - "ec2:DeleteVpnGateway"
            - "ec2:CreateRoute"
            - "ec2:CreateRouteTable"
            - "ec2:CreateSubnet"
            - "ec2:CreateVpc"
            - "ec2:CreateVpcPeeringConnection"
            - "ec2:CreateVpnConnection"
            - "ec2:CreateVpnConnectionRoute"
            - "ec2:CreateVpnGateway"
            - "iam:ChangePassword"
            - "iam:CreateAccountAlias"
            - "iam:CreateOpenIDConnectProvider"
            - "iam:CreateSAMLProvider"
            - "iam:DeleteAccountAlias"
            - "iam:DeleteOpenIDConnectProvider"
            - "iam:DeleteSAMLProvider"
            - "iam:UpdateOpenIDConnectProviderThumbprint"
            - "iam:UpdateSAMLProvider"
            Resource: "*"
          - Effect: "Allow"
            Action:
            - "acm:*"
            - "apigateway:*"
            - "automation:*"
            - "autoscaling:*"
            - "aws-marketplace:View*"
            - "aws-portal:View*"
            - "cloudformation:*"
            - "cloudfront:*"
            - "cloudsearch:*"
            - "cloudtrail:DescribeTrails"
            - "cloudtrail:GetTrailStatus"
            - "cloudtrail:LookupEvents"
            - "cloudtrail:StartLogging"
            - "cloudwatch:*"
            - "config:*"
            - "datapipeline:*"
            - "devicefarm:*"
            - "dynamodb:*"
            - "ec2:*"
            - "ec2-reports:*"
            - "elasticache:*"
            - "elasticfilesystem:*"
            - "elasticloadbalancing:*"
            - "elasticmapreduce:*"
            - "elastictranscoder:*"
            - "es:*"
            - "events:*"
            - "glacier:*"
            - "health:*"
            - "iam:*"
            - "kinesis:*"
            - "kms:*"
            - "logs:*"
            - "machinelearning:*"
            - "rds:*"
            - "redshift:*"
            - "rekognition:*"
            - "route53:*"
            - "route53domains:Get*"
            - "route53domains:List*"
            - "s3:*"
            - "sdb:*"
            - "ses:*"
            - "sns:*"
            - "sqs:*"
            - "sts:*"
            - "support:*"
            - "swf:*"
            - "tag:get*"
            - "trustedadvisor:*"
            Resource: "*"
          Version: '2012-10-17'
        PolicyName: root
    Type: AWS::IAM::Role
  DeploymentSecretKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "Key used by deployment pipeline for secret encryption/decryption"
      Enabled: true
      EnableKeyRotation: false
      KeyUsage: "ENCRYPT_DECRYPT"
      KeyPolicy:
        Version: "2012-10-17"
        Id: "{{SenzaInfo.StackName}}-{{SenzaInfo.StackVersion}}-deployment-key"
        Statement:
        - Sid: "Allow access for Key Administrators"
          Effect: "Allow"
          Resource: "*"
          Principal:
            AWS: "arn:aws:iam::{{ AccountInfo.AccountID }}:root"
          Action:
          - "kms:ReEncrypt*"
          - "kms:Create*"
          - "kms:Describe*"
          - "kms:Enable*"
          - "kms:Encrypt"
          - "kms:Decrypt"
          - "kms:List*"
          - "kms:Put*"
          - "kms:Update*"
          - "kms:Revoke*"
          - "kms:Disable*"
          - "kms:Get*"
          - "kms:Delete*"
          - "kms:ScheduleKeyDeletion"
          - "kms:CancelKeyDeletion"
        - Sid: "Allow access for deployment system to decrypt the keys"
          Effect: "Allow"
          Resource: "*"
          Principal:
            AWS:
              Fn::Join:
                - ""
                -
                  - arn:aws:iam::{{ AccountInfo.AccountID }}:role/
                  -
                    Ref: DeploymentIAMRole
          Action:
          - "kms:Decrypt"
  DeploymentSecretKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: "alias/{{SenzaInfo.StackName}}-{{SenzaInfo.StackVersion}}-deployment-secret"
      TargetKeyId:
        Ref: DeploymentSecretKey
  MasterAutoscalingLifecycleHook:
    Type: "AWS::AutoScaling::LifecycleHook"
    Properties:
      DefaultResult: "CONTINUE"
      HeartbeatTimeout: "600"
      AutoScalingGroupName:
        Ref: MasterAutoScaling
      LifecycleTransition: "autoscaling:EC2_INSTANCE_LAUNCHING"
  WorkerAutoscalingLifecycleHook:
    Type: "AWS::AutoScaling::LifecycleHook"
    Properties:
      DefaultResult: "CONTINUE"
      HeartbeatTimeout: "600"
      AutoScalingGroupName:
        Ref:
          WorkerAutoScaling
      LifecycleTransition: "autoscaling:EC2_INSTANCE_LAUNCHING"
  KubeReadyIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "{{SenzaInfo.StackName}}-{{SenzaInfo.StackVersion}}-kube-node-ready"
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            AWS:
              Fn::Join:
                - ""
                -
                  - arn:aws:iam::{{ AccountInfo.AccountID }}:role/
                  -
                    Ref: WorkerIAMRole
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            AWS:
              Fn::Join:
                - ""
                -
                  - arn:aws:iam::{{ AccountInfo.AccountID }}:role/
                  -
                    Ref: MasterIAMRole
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
            - {Action: 'autoscaling:Describe*', Effect: Allow, Resource: '*'}
            - {Action: 'autoscaling:CompleteLifecycleAction', Effect: Allow, Resource: '*'}
            - {Action: 'sts:AssumeRole', Effect: Allow, Resource: '*'}
          Version: '2012-10-17'
        PolicyName: root
  ETCDS3BackupIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "{{SenzaInfo.StackName}}-{{SenzaInfo.StackVersion}}-etcd-backup"
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            AWS:
              Fn::Join:
                - ""
                -
                  - arn:aws:iam::{{ AccountInfo.AccountID }}:role/
                  -
                    Ref: WorkerIAMRole
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ["s3:ListBucket"]
            Resource: ["arn:aws:s3:::{{ Arguments.EtcdS3BackupBucket }}"]
          - Effect: Allow
            Action:
            - "s3:PutObject"
            - "s3:GetObject"
            - "s3:DeleteObject"
            Resource: ["arn:aws:s3:::{{ Arguments.EtcdS3BackupBucket }}/*"]
          Version: '2012-10-17'
        PolicyName: root
Outputs:
  MasterAutoscalingLifecycleHook:
    Value:
      Ref: MasterAutoscalingLifecycleHook
  WorkerAutoscalingLifecycleHook:
    Value:
      Ref: WorkerAutoscalingLifecycleHook
