Description: Kubernetes cluster
SenzaInfo:
    StackName: "{{Arguments.StackName}}"
    Parameters:
      - StackName:
          Description: "Stack name"
      - UserDataMaster:
          Description: "User data of master"
      - UserDataWorker:
          Description: "User data of master"
      - KmsKey:
          Description: "ARN of KMS key to decrypt secrets"
      - MasterNodes:
          Description: "Number of master nodes"
      - WorkerNodes:
          Description: "Number of worker nodes"
      - MinimumWorkerNodes:
          Description: "Minimum number of nodes in the worker ASG"
      - MaximumWorkerNodes:
          Description: "Maximum number of nodes in the worker ASG"
      - InstanceType:
          Description: "Type of instance"
      - ClusterID:
          Description: "ID of the cluster"
      - HostedZone:
          Description: "Hosted DNS zone"
      - MasterNodePoolName:
          Description: "Name of the master node pool (ASG)"
      - WorkerNodePoolName:
          Description: "Name of the worker node pool (ASG)"

SenzaComponents:
  - Configuration:
      Type: Senza::CoreosAutoConfiguration
      PublicOnly: true # use all public subnets
      DefineParameters: false # skip CF template parameter definition
      ReleaseChannel: stable # see https://coreos.com/os/docs/latest/switching-channels.html
  - MasterLoadBalancer:
      Type: Senza::WeightedDnsElasticLoadBalancer
      HTTPPort: 443
      HealthCheckPath: /healthz
      HealthCheckPort: 8080
      SecurityGroups:
        - {Ref: MasterLoadBalancerSecurityGroup}
      Scheme: internet-facing
      Listeners:
        - PolicyNames: []
          Protocol: SSL
          InstanceProtocol: SSL
          InstancePort: 443
          LoadBalancerPort: 443
      ConnectionSettings:
        IdleTimeout: 300
      VersionDomain: "{{SenzaInfo.StackName}}-{{SenzaInfo.StackVersion}}.{{Arguments.HostedZone}}"
      MainDomain: "{{SenzaInfo.StackName}}.{{Arguments.HostedZone}}"
      Tags:
        - Key: "KubernetesCluster"
          Value: kubernetes
        - Key: "ClusterID"
          Value: "{{ Arguments.ClusterID }}"
  - MasterAutoScaling:
      Type: Senza::AutoScalingGroup
      InstanceType: m3.medium
      Image: LatestCoreOSImage
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
            VolumeType: standard
      SecurityGroups:
         - {Ref: MasterSecurityGroup}
      IamRoles:
         - {Ref: MasterIAMRole}
      ElasticLoadBalancer: MasterLoadBalancer
      HealthCheckGracePeriod: 480 # give master node up to 8 min to start up
      HealthCheckType: EC2
      AssociatePublicIpAddress: true
      UserData: "{{ Arguments.UserDataMaster }}"
      AutoScaling:
         Minimum: "{{ Arguments.MasterNodes }}"
         Maximum: "{{ Arguments.MasterNodes }}"
         DesiredCapacity: "{{ Arguments.MasterNodes }}"
         SuccessRequires: "0 within 15m"
      Tags:
        - Key: "KubernetesCluster"
          Value: kubernetes
        - Key: "ClusterID"
          Value: "{{ Arguments.ClusterID }}"
        - Key: "NodePool"
          Value: "{{ Arguments.MasterNodePoolName }}"
  - WorkerAutoScaling:
      Type: Senza::AutoScalingGroup
      InstanceType: "{{ Arguments.InstanceType }}"
      Image: LatestCoreOSImage
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 50
            VolumeType: standard
      SecurityGroups:
         - {Ref: WorkerSecurityGroup}
      IamRoles:
         - {Ref: WorkerIAMRole}
      ElasticLoadBalancer: WorkerLoadBalancer
      HealthCheckGracePeriod: 480 # give worker node up to 8 min to start up
      HealthCheckType: EC2
      AssociatePublicIpAddress: true
      UserData: "{{ Arguments.UserDataWorker }}"
      AutoScaling:
         Minimum: "{{ Arguments.MinimumWorkerNodes}}"
         Maximum: "{{ Arguments.MaximumWorkerNodes}}"
         DesiredCapacity: "{{ Arguments.WorkerNodes }}"
         SuccessRequires: "0 within 15m"
      Tags:
        - Key: "KubernetesCluster"
          Value: kubernetes
        - Key: "ClusterID"
          Value: "{{ Arguments.ClusterID }}"
        - Key: "NodePool"
          Value: "{{ Arguments.WorkerNodePoolName }}"
  - WorkerLoadBalancer:
      Type: Senza::ElasticLoadBalancer
      NameSuffix: worker
      HTTPPort: 10248
      HealthCheckPath: /healthz
      HealthCheckPort: 10248
      Listeners:
        - PolicyNames: []
          Protocol: HTTP
          InstanceProtocol: HTTP
          InstancePort: 10248
          LoadBalancerPort: 10248
      Tags:
        - Key: "Teapot"
          Value: instance health check
        - Key: "KubernetesCluster"
          Value: kubernetes
        - Key: "ClusterID"
          Value: "{{ Arguments.ClusterID }}"
      SecurityGroups:
        - {Ref: WorkerLoadBalancerSecurityGroup}

Resources:
  MasterIAMRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - {Action: 'ec2:*', Effect: Allow, Resource: '*'}
          - {Action: 'elasticloadbalancing:*', Effect: Allow, Resource: '*'}
          - {Action: 'kms:Decrypt', Effect: Allow, Resource: '{{ Arguments.KmsKey }}'}
          Version: '2012-10-17'
        PolicyName: root
    Type: AWS::IAM::Role
  WorkerIAMRole:
    Properties:
      RoleName: "{{SenzaInfo.StackName}}-{{SenzaInfo.StackVersion}}-worker"
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - {Action: 'ec2:Describe*', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:AttachVolume', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:DetachVolume', Effect: Allow, Resource: '*'}
          - {Action: 'kms:Decrypt', Effect: Allow, Resource: '{{ Arguments.KmsKey }}'}
          - {Action: 'sts:AssumeRole', Effect: Allow, Resource: '*'}
          Version: '2012-10-17'
        PolicyName: root
    Type: AWS::IAM::Role

  AutoscalerIAMRole:
    Properties:
      RoleName: "{{SenzaInfo.StackName}}-{{SenzaInfo.StackVersion}}-app-autoscaler"
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            AWS:
              Fn::Join:
                - ""
                -
                  - arn:aws:iam::{{ AccountInfo.AccountID }}:role/
                  -
                    Ref: WorkerIAMRole
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - {Action: 'ec2:Describe*', Effect: Allow, Resource: '*'}
          - {Action: 'autoscaling:DescribeAutoScalingGroups', Effect: Allow, Resource: '*'}
          - {Action: 'autoscaling:DescribeAutoScalingInstances', Effect: Allow, Resource: '*'}
          - {Action: 'autoscaling:DescribeScalingActivities', Effect: Allow, Resource: '*'}
          - {Action: 'autoscaling:SetDesiredCapacity', Effect: Allow, Resource: '*'}
          - {Action: 'autoscaling:TerminateInstanceInAutoScalingGroup', Effect: Allow, Resource: '*'}
          Version: '2012-10-17'
        PolicyName: root
    Type: AWS::IAM::Role
  MateIAMRole:
    Properties:
      RoleName: "{{SenzaInfo.StackName}}-{{SenzaInfo.StackVersion}}-app-mate"
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            AWS:
              Fn::Join:
                - ""
                -
                  - arn:aws:iam::{{ AccountInfo.AccountID }}:role/
                  -
                    Ref: WorkerIAMRole
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - {Action: 'route53:*', Effect: Allow, Resource: '*'}
          - {Action: 'elasticloadbalancing:DescribeLoadBalancers', Effect: Allow, Resource: '*'}
          Version: '2012-10-17'
        PolicyName: root
    Type: AWS::IAM::Role
  SecretaryIAMRole:
    Properties:
      RoleName: "{{SenzaInfo.StackName}}-{{SenzaInfo.StackVersion}}-app-secretary"
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            AWS:
              Fn::Join:
                - ""
                -
                  - arn:aws:iam::{{ AccountInfo.AccountID }}:role/
                  -
                    Ref: WorkerIAMRole
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action: "s3:GetObject"
            Resource: "arn:aws:s3:::{{ AccountInfo.MintBucket }}/secretary/*"
            Effect: Allow
        PolicyName: AllowMintRead
    Type: AWS::IAM::Role

  IngressControllerIAMRole:
    Properties:
      RoleName: "{{SenzaInfo.StackName}}-{{SenzaInfo.StackVersion}}-app-ingr-ctrl"
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            AWS:
              Fn::Join:
                - ""
                -
                  - arn:aws:iam::{{ AccountInfo.AccountID }}:role/
                  -
                    Ref: WorkerIAMRole
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - {Action: 'autoscaling:DescribeAutoScalingGroups', Effect: Allow, Resource: '*'}
          - {Action: 'autoscaling:AttachLoadBalancers', Effect: Allow, Resource: '*'}
          - {Action: 'autoscaling:DetachLoadBalancers', Effect: Allow, Resource: '*'}
          - {Action: 'autoscaling:DetachLoadBalancerTargetGroups', Effect: Allow, Resource: '*'}
          - {Action: 'autoscaling:AttachLoadBalancerTargetGroups', Effect: Allow, Resource: '*'}
          - {Action: 'elasticloadbalancing:DescribeLoadBalancers', Effect: Allow, Resource: '*'}
          - {Action: 'elasticloadbalancing:CreateLoadBalancer', Effect: Allow, Resource: '*'}
          - {Action: 'elasticloadbalancing:DeleteLoadBalancer', Effect: Allow, Resource: '*'}
          - {Action: 'elasticloadbalancing:DescribeListeners', Effect: Allow, Resource: '*'}
          - {Action: 'elasticloadbalancing:CreateListener', Effect: Allow, Resource: '*'}
          - {Action: 'elasticloadbalancing:DeleteListener', Effect: Allow, Resource: '*'}
          - {Action: 'elasticloadbalancing:DescribeTags', Effect: Allow, Resource: '*'}
          - {Action: 'elasticloadbalancing:CreateTargetGroup', Effect: Allow, Resource: '*'}
          - {Action: 'elasticloadbalancing:DeleteTargetGroup', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:DescribeInstances', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:DescribeSubnets', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:DescribeSecurityGroups', Effect: Allow, Resource: '*'}
          - {Action: 'ec2:DescribeRouteTables', Effect: Allow, Resource: '*'}
          Version: '2012-10-17'
        PolicyName: root
    Type: AWS::IAM::Role

  MasterSecurityGroup:
    Properties:
      GroupDescription: {Ref: 'AWS::StackName'}
      SecurityGroupIngress:
      - {CidrIp: 0.0.0.0/0, FromPort: -1, IpProtocol: icmp, ToPort: -1}
      - {CidrIp: 0.0.0.0/0, FromPort: 22, IpProtocol: tcp, ToPort: 22}
      - {CidrIp: 172.31.0.0/16, FromPort: 8082, IpProtocol: tcp, ToPort: 8082}
      - {CidrIp: 172.31.0.0/16, FromPort: 9100, IpProtocol: tcp, ToPort: 9100}
      - {CidrIp: 172.31.0.0/16, FromPort: 9911, IpProtocol: tcp, ToPort: 9911}
      Tags:
        - Key: "KubernetesCluster"
          Value: kubernetes
        - Key: "ClusterID"
          Value: "{{ Arguments.ClusterID }}"
      VpcId: "{{ AccountInfo.VpcID }}"
    Type: AWS::EC2::SecurityGroup
  MasterLoadBalancerSecurityGroup:
    Properties:
      GroupDescription: {Ref: 'AWS::StackName'}
      SecurityGroupIngress:
      - {CidrIp: 0.0.0.0/0, FromPort: -1, IpProtocol: icmp, ToPort: -1}
      - {CidrIp: 0.0.0.0/0, FromPort: 443, IpProtocol: tcp, ToPort: 443}
      Tags:
        - Key: "KubernetesCluster"
          Value: kubernetes
        - Key: "ClusterID"
          Value: "{{ Arguments.ClusterID }}"
      VpcId: "{{ AccountInfo.VpcID }}"
    Type: AWS::EC2::SecurityGroup
  MasterSecurityGroupIngressFromLoadBalancerHealthCheck:
    Properties:
      FromPort: 8080
      GroupId: {Ref: MasterSecurityGroup}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: MasterLoadBalancerSecurityGroup}
      ToPort: 8080
      Tags:
        - Key: "KubernetesCluster"
          Value: kubernetes
        - Key: "ClusterID"
          Value: "{{ Arguments.ClusterID }}"
    Type: AWS::EC2::SecurityGroupIngress
  MasterSecurityGroupIngressFromLoadBalancer:
    Properties:
      FromPort: 443
      GroupId: {Ref: MasterSecurityGroup}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: MasterLoadBalancerSecurityGroup}
      ToPort: 443
      Tags:
        - Key: "KubernetesCluster"
          Value: kubernetes
        - Key: "ClusterID"
          Value: "{{ Arguments.ClusterID }}"
    Type: AWS::EC2::SecurityGroupIngress
  WorkerSecurityGroup:
    Properties:
      GroupDescription: {Ref: 'AWS::StackName'}
      SecurityGroupIngress:
      - {CidrIp: 0.0.0.0/0, FromPort: -1, IpProtocol: icmp, ToPort: -1}
      - {CidrIp: 0.0.0.0/0, FromPort: 22, IpProtocol: tcp, ToPort: 22}
      - {CidrIp: 172.31.0.0/16, FromPort: 9999, IpProtocol: tcp, ToPort: 9999}
      - {CidrIp: 172.31.0.0/16, FromPort: 9100, IpProtocol: tcp, ToPort: 9100}
      # allow checking kubelet healthz port from within the VPC
      - {CidrIp: 172.31.0.0/16, FromPort: 10248, IpProtocol: tcp, ToPort: 10248}
      Tags:
        - Key: "KubernetesCluster"
          Value: kubernetes
        - Key: "ClusterID"
          Value: "{{ Arguments.ClusterID }}"
      VpcId: "{{ AccountInfo.VpcID }}"
    Type: AWS::EC2::SecurityGroup

  IngressLoadBalancerSecurityGroup:
    Properties:
      GroupDescription: {Ref: 'AWS::StackName'}
      SecurityGroupIngress:
      - {CidrIp: 0.0.0.0/0, FromPort: 443, IpProtocol: tcp, ToPort: 443}
      VpcId: "{{ AccountInfo.VpcID }}"
      Tags:
        - Key: "ClusterID"
          Value: "{{ Arguments.ClusterID }}"
    Type: AWS::EC2::SecurityGroup

  WorkerLoadBalancerSecurityGroup:
    Properties:
      GroupDescription: {Ref: 'AWS::StackName'}
      SecurityGroupIngress:
      - {CidrIp: 0.0.0.0/0, FromPort: -1, IpProtocol: icmp, ToPort: -1}
      VpcId: "{{ AccountInfo.VpcID }}"
      Tags:
        - Key: "ClusterID"
          Value: "{{ Arguments.ClusterID }}"
    Type: AWS::EC2::SecurityGroup
  WorkerSecurityGroupFromLoadBalancerHealthCheck:
    Properties:
      FromPort: 10248
      GroupId: {Ref: WorkerSecurityGroup}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: WorkerLoadBalancerSecurityGroup}
      ToPort: 10248
      Tags:
        - Key: "ClusterID"
          Value: "{{ Arguments.ClusterID }}"
    Type: AWS::EC2::SecurityGroupIngress
  MasterSecurityGroupIngressFromWorker:
    Properties:
      FromPort: 443
      GroupId: {Ref: MasterSecurityGroup}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: WorkerSecurityGroup}
      ToPort: 443
      Tags:
        - Key: "KubernetesCluster"
          Value: kubernetes
        - Key: "ClusterID"
          Value: "{{ Arguments.ClusterID }}"
    Type: AWS::EC2::SecurityGroupIngress
  WorkerSecurityGroupIngressFromMasterToFlannel:
    Properties:
      FromPort: 8472
      GroupId: {Ref: WorkerSecurityGroup}
      IpProtocol: udp
      SourceSecurityGroupId: {Ref: MasterSecurityGroup}
      ToPort: 8472
      Tags:
        - Key: "KubernetesCluster"
          Value: kubernetes
        - Key: "ClusterID"
          Value: "{{ Arguments.ClusterID }}"
    Type: AWS::EC2::SecurityGroupIngress
  WorkerSecurityGroupIngressFromMasterToKubelet:
    Properties:
      FromPort: 10250
      GroupId: {Ref: WorkerSecurityGroup}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: MasterSecurityGroup}
      ToPort: 10250
      Tags:
        - Key: "KubernetesCluster"
          Value: kubernetes
        - Key: "ClusterID"
          Value: "{{ Arguments.ClusterID }}"
    Type: AWS::EC2::SecurityGroupIngress
  WorkerSecurityGroupIngressFromMasterTocAdvisor:
    Properties:
      FromPort: 4194
      GroupId: {Ref: WorkerSecurityGroup}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: MasterSecurityGroup}
      ToPort: 4194
      Tags:
        - Key: "KubernetesCluster"
          Value: kubernetes
        - Key: "ClusterID"
          Value: "{{ Arguments.ClusterID }}"
    Type: AWS::EC2::SecurityGroupIngress
  MasterSecurityGroupIngressFromFlannelToMaster:
    Properties:
      FromPort: 8472
      GroupId: {Ref: MasterSecurityGroup}
      IpProtocol: udp
      SourceSecurityGroupId: {Ref: WorkerSecurityGroup}
      ToPort: 8472
      Tags:
        - Key: "KubernetesCluster"
          Value: kubernetes
        - Key: "ClusterID"
          Value: "{{ Arguments.ClusterID }}"
    Type: AWS::EC2::SecurityGroupIngress
  MasterSecurityGroupIngressFromWorkerToMasterKubeletReadOnly:
    Properties:
      FromPort: 10255
      GroupId: {Ref: MasterSecurityGroup}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: WorkerSecurityGroup}
      ToPort: 10255
      Tags:
        - Key: "KubernetesCluster"
          Value: kubernetes
        - Key: "ClusterID"
          Value: "{{ Arguments.ClusterID }}"
    Type: AWS::EC2::SecurityGroupIngress
  WorkerSecurityGroupIngressFromWorkerToFlannel:
    Properties:
      FromPort: 8472
      GroupId: {Ref: WorkerSecurityGroup}
      IpProtocol: udp
      SourceSecurityGroupId: {Ref: WorkerSecurityGroup}
      ToPort: 8472
      Tags:
        - Key: "KubernetesCluster"
          Value: kubernetes
        - Key: "ClusterID"
          Value: "{{ Arguments.ClusterID }}"
    Type: AWS::EC2::SecurityGroupIngress
  WorkerSecurityGroupIngressFromWorkerToWorkerKubeletReadOnly:
    Properties:
      FromPort: 10255
      GroupId: {Ref: WorkerSecurityGroup}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: WorkerSecurityGroup}
      ToPort: 10255
      Tags:
        - Key: "KubernetesCluster"
          Value: kubernetes
        - Key: "ClusterID"
          Value: "{{ Arguments.ClusterID }}"
    Type: AWS::EC2::SecurityGroupIngress
  WorkerSecurityGroupIngressFromWorkerToWorkerSkipperMetrics:
    Properties:
      FromPort: 9911
      GroupId: {Ref: WorkerSecurityGroup}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: WorkerSecurityGroup}
      ToPort: 9911
      Tags:
        - Key: "KubernetesCluster"
          Value: kubernetes
        - Key: "ClusterID"
          Value: "{{ Arguments.ClusterID }}"
    Type: AWS::EC2::SecurityGroupIngress

  ZmonIAMRole:
    Properties:
      RoleName: "{{SenzaInfo.StackName}}-{{SenzaInfo.StackVersion}}-app-zmon"
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            AWS:
              Fn::Join:
                - ""
                -
                  - arn:aws:iam::{{ AccountInfo.AccountID }}:role/
                  -
                    Ref: WorkerIAMRole
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
            - {Action: 'acm:DescribeCertificate', Effect: Allow, Resource: '*'}
            - {Action: 'acm:ListCertificates', Effect: Allow, Resource: '*'}
            - {Action: 'autoscaling:Describe*', Effect: Allow, Resource: '*'}
            - {Action: 'cloudformation:Describe*', Effect: Allow, Resource: '*'}
            - {Action: 'cloudformation:List*', Effect: Allow, Resource: '*'}
            - {Action: 'cloudwatch:Describe*', Effect: Allow, Resource: '*'}
            - {Action: 'cloudwatch:Get*', Effect: Allow, Resource: '*'}
            - {Action: 'cloudwatch:List*', Effect: Allow, Resource: '*'}
            - {Action: 'ec2:Describe*', Effect: Allow, Resource: '*'}
            - {Action: 'elasticache:Describe*', Effect: Allow, Resource: '*'}
            - {Action: 'elasticloadbalancing:Describe*', Effect: Allow, Resource: '*'}
            - {Action: 'iam:Get*', Effect: Allow, Resource: '*'}
            - {Action: 'iam:List*', Effect: Allow, Resource: '*'}
            - {Action: 'kinesis:Describe*', Effect: Allow, Resource: '*'}
            - {Action: 'opsworks:Describe*', Effect: Allow, Resource: '*'}
            - {Action: 'rds:Describe*', Effect: Allow, Resource: '*'}
            - {Action: 'rds:ListTagsForResource', Effect: Allow, Resource: '*'}
            - {Action: 'route53:Get*', Effect: Allow, Resource: '*'}
            - {Action: 'route53:List*', Effect: Allow, Resource: '*'}
            - {Action: 'tag:Get*', Effect: Allow, Resource: '*'}
            - {Action: 'dynamodb:ListTables', Effect: Allow, Resource: '*'}
            - Action: "s3:GetObject"
              Resource: "arn:aws:s3:::{{ AccountInfo.MintBucket }}/secretary/*"
              Effect: Allow
          Version: '2012-10-17'
        PolicyName: root
    Type: AWS::IAM::Role
