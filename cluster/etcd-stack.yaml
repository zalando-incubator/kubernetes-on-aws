AWSTemplateFormatVersion: 2010-09-09
Description: Kubernetes etcd cluster
Metadata:
  Tags:
    InfrastructureComponent: "true"
    "kubernetes:component": "etcd-cluster"
Outputs:
  EtcdClusterSecurityGroupId:
    Description: "Security Group ID of the etcd cluster"
    Value: !GetAtt EtcdClusterSecurityGroup.GroupId
    Export:
      Name: "etcd-cluster-etcd:etcd-security-group-id"
  LaunchTemplateId:
    Description: "Launch template ID of the etcd nodes"
    Value: !Ref LaunchTemplate
    Export:
      Name: "etcd-cluster-etcd:launch-template-id"
Resources:
  AppServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref EtcdRole
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: 'etcd-cluster-etcd'
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvdb
            Ebs:
              VolumeSize: "32"
              DeleteOnTermination: true
              VolumeType: "gp3"
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !GetAtt EtcdClusterSecurityGroup.GroupId
        EbsOptimized: false
        IamInstanceProfile:
          Name: !Ref AppServerInstanceProfile
        InstanceInitiatedShutdownBehavior: terminate
        ImageId: {{.Cluster.ConfigItems.etcd_ami}}
        InstanceType: {{.Cluster.ConfigItems.etcd_instance_type}}
        UserData:
          Fn::Base64: !Sub |
            #cloud-config
            write_files:
              - path: /etc/scalyr-agent-2/userdata.yaml
                permissions: 0644
                content: |
                  scalyr_api_key: "{{.Values.etcd_scalyr_key}}"
                  stack_name: ${AWS::StackName}
              - path: /etc/default/etcd
                permissions: 0644
                content: |
                  ETCD_CERT_FILE=/etc/etcd/ssl/client.cert
                  ETCD_KEY_FILE=/etc/etcd/ssl/client.key
                  ETCD_TRUSTED_CA_FILE=/etc/etcd/ssl/ca.cert
                  ETCD_CLIENT_TLS_ENABLED='true'
                  ETCD_LOG_LEVEL=info
                  HOSTED_ZONE="{{.Values.hosted_zone}}"
                  S3_CERTS_BUCKET=s3://cluster-lifecycle-manager-170858875137-eu-central-1/kube-aws-test-1/etcd/etcd_ssl_certicates_test.userdata
                  AWS_DEFAULT_REGION=eu-central-1
            runcmd:
              - [ cfn-signal, --success, 'true', --stack, ${AWS::StackName}, --resource, AppServer, --region, ${AWS::Region} ]
              - [ complete-asg-lifecycle.py, 'etcd-server-lifecycle-hook' ]
  AppServer:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: "1"
        Timeout: PT15M
    Properties:
      DesiredCapacity: {{.Cluster.ConfigItems.etcd_instance_count}}
      HealthCheckGracePeriod: 0
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: {{.Cluster.ConfigItems.etcd_instance_count}}
      MaxSize: {{.Cluster.ConfigItems.etcd_instance_count}}
      VPCZoneIdentifier:
{{- with $values := .Values }}
{{- range $az := $values.availability_zones }}
        - "{{ index $values.subnets $az }}"
{{- end }}
{{- end }}
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: etcd-cluster-etcd
        - Key: StackName
          PropagateAtLaunch: true
          Value: etcd-cluster
        - Key: StackVersion
          PropagateAtLaunch: true
          Value: etcd
        - Key: kubernetes:component
          PropagateAtLaunch: true
          Value: etcd-cluster
        - Key: certificate-expiry-ca
          PropagateAtLaunch: true
          Value: {{certificateExpiry (base64Decode .Cluster.ConfigItems.etcd_client_ca_cert)}}
        - Key: certificate-expiry-node
          PropagateAtLaunch: true
          Value: {{certificateExpiry (base64Decode .Cluster.ConfigItems.etcd_client_server_cert)}}
  AutoScalingLifecycleHook:
    Type: "AWS::AutoScaling::LifecycleHook"
    Properties:
      AutoScalingGroupName: !Ref AppServer
      LifecycleHookName: "etcd-server-lifecycle-hook"
      LifecycleTransition: "autoscaling:EC2_INSTANCE_LAUNCHING"
      HeartbeatTimeout: "300"
  AppServerScaleDown:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AppServer
      Cooldown: "60"
      ScalingAdjustment: "-1"
  AppServerScaleUp:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AppServer
      Cooldown: "60"
      ScalingAdjustment: "1"
  EtcdClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Etcd Cluster Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: "{{.Values.vpc_ipv4_cidr}}"
      - IpProtocol: tcp
        FromPort: 2381
        ToPort: 2381
        CidrIp: "{{.Values.vpc_ipv4_cidr}}"
      - IpProtocol: tcp
        FromPort: 9100
        ToPort: 9100
        CidrIp: "{{.Values.vpc_ipv4_cidr}}"
      VpcId: "{{.Cluster.ConfigItems.vpc_id}}"
      Tags:
        - Key: InfrastructureComponent
          Value: true
  EtcdClusterIngressMembers:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !GetAtt EtcdClusterSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 2379
      ToPort: 2479
      SourceSecurityGroupId: !GetAtt EtcdClusterSecurityGroup.GroupId
  EtcdBackupBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: "{{.Cluster.ConfigItems.etcd_s3_backup_bucket}}"
      LifecycleConfiguration:
        Rules:
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            ExpirationInDays: 2
            NoncurrentVersionExpirationInDays: 1
            Prefix: ""
            Status: Enabled
      VersioningConfiguration:
        Status: Suspended
  EtcdRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: AmazonEC2ReadOnlyAccess
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
              - ec2:Describe*
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:RevokeSecurityGroupIngress
            Resource: "*"
          - Effect: Allow
            Action: autoscaling:Describe*
            Resource: "*"
      - PolicyName: AmazonRoute53Access
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - route53:ListHostedZonesByName
            - route53:ChangeResourceRecordSets
            - route53:GetHostedZone
            - route53:ListResourceRecordSets
            - route53:GetChange
            Resource: "*"
      - PolicyName: AmazonS3EtcdBackupWrite
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject
            Resource: [ "arn:aws:s3:::{{.Cluster.ConfigItems.etcd_s3_backup_bucket}}/*" ]
      - PolicyName: S3ClusterLifecycle
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource: 'arn:aws:s3:::*'
      - PolicyName: ASGCompleteLifecycle
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - autoscaling:CompleteLifecycleAction
            # The buggy CF doesn't allow to do something like !GetAtt AppServer.Arn
            # Ref: https://github.com/aws-cloudformation/cloudformation-coverage-roadmap/issues/548
            Resource: [ "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/etcd-cluster-etcd-AppServer*" ]
      - PolicyName: KMSDecrypt
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action: ["kms:Decrypt"]
            Resource: ["{{.Values.etcd_kms_key_arn}}"]
