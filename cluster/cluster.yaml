AWSTemplateFormatVersion: 2010-09-09
Description: Kubernetes cluster
Metadata:
  Tags:
    InfrastructureComponent: "true"
Resources:
{{ if ne .Cluster.ConfigItems.delete_vpc_resources "true" }}
  EtcdClusterSecurityGroupIngressFromMaster:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      FromPort: 2379
      ToPort: 2379
      GroupId: !ImportValue 'etcd-cluster-etcd:etcd-security-group-id'
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref MasterSecurityGroup
  EtcdClusterSecurityGroupTLSIngressFromMaster:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      FromPort: 2479
      ToPort: 2479
      GroupId: !ImportValue 'etcd-cluster-etcd:etcd-security-group-id'
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref MasterSecurityGroup
  IngressLoadBalancerSecurityGroup:
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - Key: 'kubernetes.io/cluster/{{.Cluster.ID}}'
          Value: owned
        - Key: 'kubernetes:application'
          Value: kube-ingress-aws-controller
      VpcId: "{{.Cluster.ConfigItems.vpc_id}}"
    Type: 'AWS::EC2::SecurityGroup'
  MasterKubeletToMasterKubeletSecurityGroup:
    Properties:
      FromPort: 10250
      GroupId: !Ref MasterSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref MasterSecurityGroup
      Tags:
        - Key: 'kubernetes.io/cluster/{{.Cluster.ID}}'
          Value: owned
      ToPort: 10250
    Type: 'AWS::EC2::SecurityGroupIngress'
  MasterLoadBalancerNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "{{.Cluster.LocalID}}-nlb"
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: true
      Scheme: internet-facing
      Subnets:
  {{ with $values := .Values }}
  {{ range $az := $values.availability_zones }}
        - "{{ index $values.subnets $az }}"
  {{ end }}
  {{ end }}
      Tags:
        - Key: 'kubernetes.io/cluster/{{.Cluster.ID}}'
          Value: owned
        - Key: "application"
          Value: kube-apiserver
        - Key: "component"
          Value: "kube-apiserver"
      Type: network
  MasterLoadBalancerNLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPort: 8443
      HealthCheckProtocol: HTTPS
      HealthCheckPath: "/readyz"
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Name: "{{.Cluster.LocalID}}-nlb"
      Port: 8443
      Protocol: TLS
      Tags:
        - Key: 'kubernetes.io/cluster/{{.Cluster.ID}}'
          Value: owned
        - Key: "application"
          Value: kube-apiserver
        - Key: "component"
          Value: "kube-apiserver"
      VpcId: "{{.Cluster.ConfigItems.vpc_id}}"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
  MasterLoadBalancerNLBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      AlpnPolicy:
        - {{ if eq .Cluster.ConfigItems.experimental_nlb_alpn_h2_enabled "true" }}HTTP2Preferred{{else}}None{{end}}
      SslPolicy: "ELBSecurityPolicy-TLS-1-2-2017-01"
      Certificates:
        - CertificateArn: "{{.Values.load_balancer_certificate}}"
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref MasterLoadBalancerNLBTargetGroup
      LoadBalancerArn: !Ref MasterLoadBalancerNLB
      Port: 443
      Protocol: TLS
  MasterLoadBalancerVersionDomain:
    Properties:
      AliasTarget:
        DNSName: !GetAtt
          - MasterLoadBalancerNLB
          - DNSName
        HostedZoneId: !GetAtt
          - MasterLoadBalancerNLB
          - CanonicalHostedZoneID
      HostedZoneName: "{{.Values.hosted_zone}}."
      Name: "{{.Cluster.LocalID}}.{{.Values.hosted_zone}}."
      Type: A
    Type: 'AWS::Route53::RecordSet'
  MasterSecurityGroup:
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 8443
          IpProtocol: tcp
          ToPort: 8443
        - CidrIp: 0.0.0.0/0
          FromPort: -1
          IpProtocol: icmp
          ToPort: -1
        - CidrIp: {{ if eq .Cluster.ConfigItems.ssh_vpc_only "true" }}"{{.Values.vpc_ipv4_cidr}}"{{ else }}"0.0.0.0/0"{{ end }}
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: "{{.Values.vpc_ipv4_cidr}}"
          FromPort: 7980
          IpProtocol: tcp
          ToPort: 7980
        - CidrIp: "{{.Values.vpc_ipv4_cidr}}"
          FromPort: 30080
          IpProtocol: tcp
          ToPort: 30080
        - CidrIp: "{{.Values.vpc_ipv4_cidr}}"
          FromPort: 9054
          IpProtocol: tcp
          ToPort: 9054
        - CidrIp: "{{.Values.vpc_ipv4_cidr}}"
          FromPort: 9153
          IpProtocol: tcp
          ToPort: 9153
        - CidrIp: "{{.Values.vpc_ipv4_cidr}}"
          FromPort: 53
          IpProtocol: tcp
          ToPort: 53
        - CidrIp: "{{.Values.vpc_ipv4_cidr}}"
          FromPort: 53
          IpProtocol: udp
          ToPort: 53
      Tags:
        - Key: 'kubernetes.io/cluster/{{.Cluster.ID}}'
          Value: owned
      VpcId: "{{.Cluster.ConfigItems.vpc_id}}"
    Type: 'AWS::EC2::SecurityGroup'
  MasterSecurityGroupIngressFromFlannelToMaster:
    Properties:
      FromPort: 8472
      GroupId: !Ref MasterSecurityGroup
      IpProtocol: udp
      SourceSecurityGroupId: !Ref WorkerSecurityGroup
      Tags:
        - Key: 'kubernetes.io/cluster/{{.Cluster.ID}}'
          Value: owned
      ToPort: 8472
    Type: 'AWS::EC2::SecurityGroupIngress'
  MasterSecurityGroupIngressFromMaster:
    Properties:
      FromPort: 443
      GroupId: !Ref MasterSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref MasterSecurityGroup
      Tags:
        - Key: 'kubernetes.io/cluster/{{.Cluster.ID}}'
          Value: owned
      ToPort: 443
    Type: 'AWS::EC2::SecurityGroupIngress'
  MasterSecurityGroupIngressFromWorker:
    Properties:
      FromPort: 443
      GroupId: !Ref MasterSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref WorkerSecurityGroup
      Tags:
        - Key: 'kubernetes.io/cluster/{{.Cluster.ID}}'
          Value: owned
      ToPort: 443
    Type: 'AWS::EC2::SecurityGroupIngress'
  MasterSecurityGroupIngressFromWorkerToMasterKubelet:
    Properties:
      FromPort: 10250
      GroupId: !Ref MasterSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref WorkerSecurityGroup
      Tags:
        - Key: 'kubernetes.io/cluster/{{.Cluster.ID}}'
          Value: owned
      ToPort: 10250
    Type: 'AWS::EC2::SecurityGroupIngress'
  MasterSecurityGroupIngressFromWorkerToNodeMonitor:
    Properties:
      FromPort: 9100
      ToPort: 9101
      GroupId: !Ref MasterSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref WorkerSecurityGroup
      Tags:
        - Key: 'kubernetes.io/cluster/{{.Cluster.ID}}'
          Value: owned
    Type: 'AWS::EC2::SecurityGroupIngress'
  MasterSecurityGroupIngressFromWorkerToSkipperMetrics:
    Properties:
      FromPort: 9005
      ToPort: 9005
      GroupId: !Ref MasterSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref WorkerSecurityGroup
      Tags:
        - Key: 'kubernetes.io/cluster/{{.Cluster.ID}}'
          Value: owned
    Type: 'AWS::EC2::SecurityGroupIngress'
  WorkerSecurityGroup:
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: -1
          IpProtocol: icmp
          ToPort: -1
        - CidrIp: {{ if eq .Cluster.ConfigItems.ssh_vpc_only "true" }}"{{.Values.vpc_ipv4_cidr}}"{{ else }}"0.0.0.0/0"{{ end }}
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
{{- if index .Cluster.ConfigItems "open_sg_ingress_ranges" }}
{{- range $index, $element := sgIngressRanges .Cluster.ConfigItems.open_sg_ingress_ranges }}
        - CidrIp: {{ $element.CIDR }}
          FromPort: {{ $element.FromPort }}
          IpProtocol: {{ $element.Protocol }}
          ToPort: {{ $element.ToPort }}
{{- end }}
{{- end }}
        - CidrIp: {{ if eq .Cluster.ConfigItems.kube_aws_ingress_controller_nlb_enabled "true" }}"0.0.0.0/0"{{else}}"{{.Values.vpc_ipv4_cidr}}"{{end}}
          FromPort: 9998
          IpProtocol: tcp
          ToPort: 9999
{{- if ne .Cluster.ConfigItems.skipper_redis_replicas "0"}}
        - CidrIp: "{{.Values.vpc_ipv4_cidr}}"
          FromPort: 9990
          IpProtocol: tcp
          ToPort: 9990
        - CidrIp: "{{.Values.vpc_ipv4_cidr}}"
          FromPort: 9990
          IpProtocol: udp
          ToPort: 9990
{{- end }}
        - CidrIp: "{{.Values.vpc_ipv4_cidr}}"
          FromPort: 10248
          IpProtocol: tcp
          ToPort: 10248
        - CidrIp: "{{.Values.vpc_ipv4_cidr}}"
          FromPort: 9054
          IpProtocol: tcp
          ToPort: 9054
        - CidrIp: "{{.Values.vpc_ipv4_cidr}}"
          FromPort: 9153
          IpProtocol: tcp
          ToPort: 9153
        - CidrIp: "{{.Values.vpc_ipv4_cidr}}"
          FromPort: 10250
          IpProtocol: tcp
          ToPort: 10250
        - CidrIp: "{{.Values.vpc_ipv4_cidr}}"
          FromPort: 30000
          IpProtocol: tcp
          ToPort: 32767
        - CidrIp: "{{.Values.vpc_ipv4_cidr}}"
          FromPort: 53
          IpProtocol: tcp
          ToPort: 53
        - CidrIp: "{{.Values.vpc_ipv4_cidr}}"
          FromPort: 53
          IpProtocol: udp
          ToPort: 53
      Tags:
        - Key: 'kubernetes.io/cluster/{{.Cluster.ID}}'
          Value: owned
      VpcId: "{{.Cluster.ConfigItems.vpc_id}}"
    Type: 'AWS::EC2::SecurityGroup'
  WorkerSecurityGroupIngressFromMasterToFlannel:
    Properties:
      FromPort: 8472
      GroupId: !Ref WorkerSecurityGroup
      IpProtocol: udp
      SourceSecurityGroupId: !Ref MasterSecurityGroup
      Tags:
        - Key: 'kubernetes.io/cluster/{{.Cluster.ID}}'
          Value: owned
      ToPort: 8472
    Type: 'AWS::EC2::SecurityGroupIngress'
  WorkerSecurityGroupIngressFromMasterToKubelet:
    Properties:
      FromPort: 10250
      GroupId: !Ref WorkerSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref MasterSecurityGroup
      Tags:
        - Key: 'kubernetes.io/cluster/{{.Cluster.ID}}'
          Value: owned
      ToPort: 10250
    Type: 'AWS::EC2::SecurityGroupIngress'
  WorkerSecurityGroupIngressFromWorkerToFlannel:
    Properties:
      FromPort: 8472
      GroupId: !Ref WorkerSecurityGroup
      IpProtocol: udp
      SourceSecurityGroupId: !Ref WorkerSecurityGroup
      Tags:
        - Key: 'kubernetes.io/cluster/{{.Cluster.ID}}'
          Value: owned
      ToPort: 8472
    Type: 'AWS::EC2::SecurityGroupIngress'
  WorkerSecurityGroupIngressFromWorkerToWorkerKubelet:
    Properties:
      FromPort: 10250
      GroupId: !Ref WorkerSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref WorkerSecurityGroup
      Tags:
        - Key: 'kubernetes.io/cluster/{{.Cluster.ID}}'
          Value: owned
      ToPort: 10250
    Type: 'AWS::EC2::SecurityGroupIngress'
  WorkerSecurityGroupIngressFromWorkerToWorkerSkipperMetrics:
    Properties:
      FromPort: 9911
      GroupId: !Ref WorkerSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref WorkerSecurityGroup
      Tags:
        - Key: 'kubernetes.io/cluster/{{.Cluster.ID}}'
          Value: owned
      ToPort: 9911
    Type: 'AWS::EC2::SecurityGroupIngress'
  WorkerSecurityGroupIngressFromWorkerToNodeMonitor:
    Properties:
      FromPort: 9100
      ToPort: 9101
      GroupId: !Ref WorkerSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref WorkerSecurityGroup
      Tags:
        - Key: 'kubernetes.io/cluster/{{.Cluster.ID}}'
          Value: owned
    Type: 'AWS::EC2::SecurityGroupIngress'
  EFSSecurityGroupIngressFromWorkerSecurityGroup:
    Properties:
      FromPort: 2049
      GroupId: !Ref EFSWorkerSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref WorkerSecurityGroup
      Tags:
        - Key: 'kubernetes.io/cluster/{{.Cluster.ID}}'
          Value: owned
      ToPort: 2049
    Type: 'AWS::EC2::SecurityGroupIngress'
  EFSWorkerSecurityGroup:
    Properties:
      GroupDescription: worker to EFS sg
      Tags:
        - Key: 'kubernetes.io/cluster/{{.Cluster.ID}}'
          Value: owned
      VpcId: "{{.Cluster.ConfigItems.vpc_id}}"
    Type: 'AWS::EC2::SecurityGroup'

# end of vpc dependent resources
{{ end }}
  OIDCProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      ClientIdList:
      - "sts.amazonaws.com"
      Url: "https://{{.Cluster.LocalID}}.{{.Values.hosted_zone}}"
      ThumbprintList:
      # SHA-1 sum of the root certificate in the trust chain for the certificate
      # use to serve the open id discovery document.
      - "9e99a48a9960b14926bb7f3b02e22da2b0ab7280"
  WorkerIAMRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::{{.Cluster.InfrastructureAccount | getAWSAccountID}}:role/'
                  - !Ref MasterIAMRole
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action: 'autoscaling:TerminateInstanceInAutoScalingGroup'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:Describe*'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:AttachVolume'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:DetachVolume'
                Effect: Allow
                Resource: '*'
              - Action: 'kms:Decrypt'
                Effect: Allow
                Resource: '*'
              - Action: 'sts:AssumeRole'
                Effect: Allow
                Resource: '*'
              - Action: 's3:GetObject'
                Effect: Allow
                Resource: 'arn:aws:s3:::*'
              - Action:
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:BatchGetImage'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:GetAuthorizationToken'
                Effect: Allow
                Resource: '*'
              # allow connecting via Session Manager
              - Action:
                - "ssm:UpdateInstanceInformation"
                - "ssmmessages:CreateControlChannel"
                - "ssmmessages:CreateDataChannel"
                - "ssmmessages:OpenControlChannel"
                - "ssmmessages:OpenDataChannel"
                Effect: Allow
                Resource: "*"
{{ if eq .Cluster.Environment "e2e" }}
# Add extra permissions to worker IAM role to test that if a pod manages to get
# the WorkerIAMRole assigned it can list a specific s3 bucket.
# see ../test/e2e/aws_iam.go for more information about the e2e test where this
# is relevant.
              - Action:
                - 's3:ListBucket'
                Effect: Allow
                Resource:
                - >-
                  arn:aws:s3:::zalando-e2e-test-{{accountID .Cluster.InfrastructureAccount}}-{{.Cluster.LocalID}}
              - Action:
                - 's3:PutObject'
                - 's3:GetObject'
                - 's3:DeleteObject'
                Effect: Allow
                Resource:
                - >-
                  arn:aws:s3:::zalando-e2e-test-{{accountID .Cluster.InfrastructureAccount}}-{{.Cluster.LocalID}}/*
{{ end }}
            Version: 2012-10-17
          PolicyName: root
      RoleName: "{{.Cluster.LocalID}}-worker"
    Type: 'AWS::IAM::Role'
  AutoscalerIAMRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Federated: "arn:aws:iam::{{ .Cluster.InfrastructureAccount | getAWSAccountID }}:oidc-provider/{{.Cluster.LocalID}}.{{.Values.hosted_zone}}"
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                "{{ .Cluster.LocalID }}.{{ .Values.hosted_zone }}:sub": "system:serviceaccount:kube-system:cluster-autoscaler"
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action: 'ec2:Describe*'
                Effect: Allow
                Resource: '*'
              - Action: 'autoscaling:DescribeTags'
                Effect: Allow
                Resource: '*'
              - Action: 'autoscaling:DescribeAutoScalingGroups'
                Effect: Allow
                Resource: '*'
              - Action: 'autoscaling:DescribeAutoScalingInstances'
                Effect: Allow
                Resource: '*'
              - Action: 'autoscaling:DescribeLaunchConfigurations'
                Effect: Allow
                Resource: '*'
              - Action: 'autoscaling:DescribeScalingActivities'
                Effect: Allow
                Resource: '*'
              - Action: 'autoscaling:SetDesiredCapacity'
                Effect: Allow
                Resource: '*'
              - Action: 'autoscaling:TerminateInstanceInAutoScalingGroup'
                Effect: Allow
                Resource: '*'
            Version: 2012-10-17
          PolicyName: root
      RoleName: "{{.Cluster.LocalID}}-app-autoscaler"
    Type: 'AWS::IAM::Role'
  DeploymentIAMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - 'ec2:*'
            Condition:
              StringLike:
                'ec2:Region':
                  - us-*
                  - ap-*
                  - sa-*
            Effect: Deny
            Resource: '*'
          - Action:
              - 'iam:Update*'
              - 'iam:Put*'
              - 'iam:Create*'
              - 'iam:Delete*'
              - 'iam:Attach*'
              - 'iam:Detach*'
            Effect: Deny
            Resource: 'arn:aws:iam::*:role/Shibboleth*'
          - Action:
              - 'ec2:DeleteRoute'
              - 'ec2:DeleteRouteTable'
              - 'ec2:DeleteSubnet'
              - 'ec2:DeleteVpc'
              - 'ec2:DeleteVpcPeeringConnection'
              - 'ec2:DeleteVpnConnection'
              - 'ec2:DeleteVpnConnectionRoute'
              - 'ec2:DeleteVpnGateway'
              - 'ec2:CreateRoute'
              - 'ec2:CreateRouteTable'
              - 'ec2:CreateSubnet'
              - 'ec2:CreateVpc'
              - 'ec2:CreateVpcPeeringConnection'
              - 'ec2:CreateVpnConnection'
              - 'ec2:CreateVpnConnectionRoute'
              - 'ec2:CreateVpnGateway'
              - 'iam:ChangePassword'
              - 'iam:CreateAccountAlias'
              - 'iam:CreateOpenIDConnectProvider'
              - 'iam:CreateSAMLProvider'
              - 'iam:DeleteAccountAlias'
              - 'iam:DeleteOpenIDConnectProvider'
              - 'iam:DeleteSAMLProvider'
              - 'iam:UpdateOpenIDConnectProviderThumbprint'
              - 'iam:UpdateSAMLProvider'
            Effect: Deny
            Resource: '*'
          - Action:
              - 'acm:*'
              - 'apigateway:*'
              - 'application-autoscaling:*'
              - 'appsync:*'
              - 'athena:*'
              - 'automation:*'
              - 'autoscaling-plans:*'
              - 'autoscaling:*'
              - 'aws-marketplace:View*'
              - 'aws-portal:ViewAccount'
              - 'aws-portal:ViewBilling'
              - 'aws-portal:ViewUsage'
              - 'backup-storage:*'
              - 'backup:*'
              - 'batch:*'
              - 'budgets:ViewBudget'
              - 'cassandra:*'
              - 'ce:*'
              - 'cloudformation:*'
              - 'cloudfront:*'
              - 'cloudsearch:*'
              - 'cloudtrail:DescribeTrails'
              - 'cloudtrail:GetEventSelectors'
              - 'cloudtrail:GetTrailStatus'
              - 'cloudtrail:LookupEvents'
              - 'cloudtrail:StartLogging'
              - 'cloudwatch:*'
              - 'config:*'
              - 'cur:DescribeReportDefinitions'
              - 'datapipeline:*'
              - 'dax:*'
              - 'devicefarm:*'
              - 'dlm:*'
              - 'ds:*'
              - 'dynamodb:*'
              - 'ec2-reports:*'
              - 'ec2:*'
              - 'ecr:Get*'
              - 'ecr:BatchGetImage'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:Describe*'
              - 'ecr:List*'
              - 'elasticache:*'
              - 'elasticfilesystem:*'
              - 'elasticloadbalancing:*'
              - 'elasticmapreduce:*'
              - 'elastictranscoder:*'
              - 'es:*'
              - 'events:*'
              - 'firehose:*'
              - 'fsx:*'
              - 'glacier:*'
              - 'glue:*'
              - 'health:*'
              - 'iam:*'
              - 'kafka:*'
              - 'kinesis:*'
              - 'kinesisanalytics:*'
              - 'kms:*'
              {{ if eq .Cluster.ConfigItems.deploy_allow_lakeformation "true" }}
              - 'lakeformation:*'
              {{ end }}
              - 'lambda:*'
              - 'lex:*'
              - 'logs:*'
              - 'machinelearning:*'
              - 'mq:*'
              - 'pricing:Describe*'
              - 'pricing:Get*'
              - 'quicksight:*'
              {{ if eq .Cluster.ConfigItems.deploy_allow_ram "true" }}
              - 'ram:*'
              {{ end }}
              - 'rds:*'
              - 'redshift:*'
              - 'rekognition:*'
              - 'resource-groups:*'
              - 'route53:*'
              - 'route53domains:Get*'
              - 'route53domains:List*'
              - 's3:*'
              - 'sagemaker:*'
              - 'sdb:*'
              - 'secretsmanager:*'
              - 'serviceQuotas:Get*'
              - 'serviceQuotas:List*'
              - 'ses:*'
              - 'sns:*'
              - 'sqs:*'
              - 'ssm:*'
              - 'states:*'
              - 'storagegateway:*'
              - 'sts:*'
              - 'support:*'
              - 'swf:*'
              - 'tag:get*'
              - 'transfer:*'
              - 'trustedadvisor:*'
              - 'waf-regional:*'
              - 'waf:*'
              - 'wafv2:*'
            Effect: Allow
            Resource: '*'
  DeploymentIAMRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::{{.Cluster.InfrastructureAccount | getAWSAccountID}}:role/'
                  - !Ref WorkerIAMRole
        Version: 2012-10-17
      Path: /
      ManagedPolicyArns:
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/ZalandoCloud-DenyEc2UsApSa"
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/ZalandoCloud-DenyModifyShibboleth"
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/ZalandoCloud-DenyDefault"
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/ZalandoCloud-AllowPowerUser"
      RoleName: "{{.Cluster.LocalID}}-deployment"
    Type: 'AWS::IAM::Role'
  DeploymentSecretKey:
    Properties:
      Description: Key used by deployment pipeline for secret encryption/decryption
      EnableKeyRotation: false
      Enabled: true
      KeyPolicy:
        Id: "{{.Cluster.LocalID}}-deployment-key"
        Statement:
          - Action:
              - 'kms:ReEncrypt*'
              - 'kms:Create*'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Effect: Allow
            Principal:
              AWS: 'arn:aws:iam::{{.Cluster.InfrastructureAccount | getAWSAccountID}}:root'
            Resource: '*'
            Sid: Allow access for Key Administrators
          - Action:
              - 'kms:Decrypt'
            Effect: Allow
            # Avoid circular dependencies because CF still can't do this properly
            Principal: "*"
            Condition:
              ArnEquals:
                aws:PrincipalArn:
                  - !GetAtt DeploymentIAMRole.Arn
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/{{.Cluster.LocalID}}-deployment-service-deployment"
            Resource: '*'
            Sid: Allow access for deployment system to decrypt the keys
        Version: 2012-10-17
      KeyUsage: ENCRYPT_DECRYPT
    Type: 'AWS::KMS::Key'
  DeploymentSecretKeyAlias:
    Properties:
      AliasName: "alias/{{.Cluster.LocalID}}-deployment-secret"
      TargetKeyId: !Ref DeploymentSecretKey
    Type: 'AWS::KMS::Alias'
  DeploymentServiceBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: "zalando-deployment-service-{{accountID .Cluster.InfrastructureAccount}}-{{.Cluster.LocalID}}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: application
          Value: deployment-service
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
  DeploymentServiceBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DeploymentServiceBucket
      PolicyDocument:
        Statement:
          - NotAction:
              - s3:GetObject
              - s3:DeleteObject
              - s3:ListBucket
              - s3:PutObject
            Effect: Deny
            Resource:
              - !Sub "arn:aws:s3:::${DeploymentServiceBucket}/*"
              - !Sub "arn:aws:s3:::${DeploymentServiceBucket}"
            Principal:
              AWS:
                - !GetAtt DeploymentControllerRole.Arn
                - !GetAtt DeploymentStatusServiceRole.Arn
{{- if ne .Cluster.ConfigItems.deployment_service_api_role_arn "" }}
          - Action:
              - s3:PutObject
              - s3:PutObjectAcl
            Effect: Allow
            Resource:
              - !Sub "arn:aws:s3:::${DeploymentServiceBucket}/manifests/*"
            Principal:
              AWS: "{{.Cluster.ConfigItems.deployment_service_api_role_arn}}"
{{- end }}
          - Action: "s3:*"
            Effect: Deny
            Resource:
              - !Sub "arn:aws:s3:::${DeploymentServiceBucket}/*"
              - !Sub "arn:aws:s3:::${DeploymentServiceBucket}"
            Principal: "*"
            Condition:
              ArnNotEquals:
                aws:PrincipalArn:
                  - !GetAtt DeploymentControllerRole.Arn
                  - !GetAtt DeploymentStatusServiceRole.Arn
{{- if ne .Cluster.ConfigItems.deployment_service_api_role_arn "" }}
                  - "{{.Cluster.ConfigItems.deployment_service_api_role_arn}}"
{{- end }}
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/cluster-lifecycle-manager-entrypoint"
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/Shibboleth-Administrator"
  DeploymentControllerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "{{.Cluster.LocalID}}-deployment-service-controller"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: "arn:aws:iam::{{ .Cluster.InfrastructureAccount | getAWSAccountID }}:oidc-provider/{{.Cluster.LocalID}}.{{.Values.hosted_zone}}"
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                "{{ .Cluster.LocalID }}.{{ .Values.hosted_zone }}:sub": "system:serviceaccount:kube-system:deployment-service-controller"
      Policies:
        - PolicyName: ControllerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - s3:DeleteObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentServiceBucket}/*"
                Effect: Allow
              - Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentServiceBucket}/manifests/*"
                Effect: Allow
              - Action:
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentServiceBucket}/final-task-statuses/*"
                Effect: Allow
              - Action:
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentServiceBucket}"
                Effect: Allow
              - Action:
                  - kms:Decrypt
                Resource:
                  - !GetAtt DeploymentSecretKey.Arn
                Effect: Allow
              - Action:
                  - 'sts:AssumeRole'
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/{{.Cluster.LocalID}}-deployment-service-deployment"
  DeploymentControllerDeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "{{.Cluster.LocalID}}-deployment-service-deployment"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt DeploymentControllerRole.Arn
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/ZalandoCloud-DenyEc2UsApSa"
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/ZalandoCloud-DenyModifyShibboleth"
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/ZalandoCloud-DenyDefault"
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/ZalandoCloud-AllowPowerUser"
{{- if eq .Cluster.ConfigItems.deployment_service_ml_experiments_enabled "true"}}
  DeploymentControllerMLExperimentDeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "{{.Cluster.LocalID}}-deployment-service-ml-experiment-deployment"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt DeploymentControllerRole.Arn
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/ZalandoCloud-mlbuilder-permission-boundary"
{{- end }}
  DeploymentStatusServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "{{.Cluster.LocalID}}-deployment-service-status-service"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: "arn:aws:iam::{{ .Cluster.InfrastructureAccount | getAWSAccountID }}:oidc-provider/{{.Cluster.LocalID}}.{{.Values.hosted_zone}}"
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                "{{ .Cluster.LocalID }}.{{ .Values.hosted_zone }}:sub": "system:serviceaccount:kube-system:deployment-service-status-service"
      Policies:
        - PolicyName: StatusServicePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentServiceBucket}/final-task-statuses/*"
                Effect: Allow
              - Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentServiceBucket}/cached-probe-results/*"
                Effect: Allow
              - Action:
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${DeploymentServiceBucket}"
                Effect: Allow
              - Action:
                  - 'cloudformation:DescribeStackEvents'
                  - 'cloudformation:DescribeStackResources'
                  - 'cloudformation:DescribeStacks'
                Effect: Allow
                Resource: '*'
  ExternalDNSIAMRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Federated: "arn:aws:iam::{{ .Cluster.InfrastructureAccount | getAWSAccountID }}:oidc-provider/{{.Cluster.LocalID}}.{{.Values.hosted_zone}}"
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                "{{ .Cluster.LocalID }}.{{ .Values.hosted_zone }}:sub": "system:serviceaccount:kube-system:external-dns"
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action: 'route53:*'
                Effect: Allow
                Resource: '*'
            Version: 2012-10-17
          PolicyName: root
      RoleName: "{{.Cluster.LocalID}}-app-external-dns"
    Type: 'AWS::IAM::Role'
  IngressControllerIAMRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Federated: "arn:aws:iam::{{ .Cluster.InfrastructureAccount | getAWSAccountID }}:oidc-provider/{{.Cluster.LocalID}}.{{ .Values.hosted_zone }}"
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                "{{ .Cluster.LocalID }}.{{ .Values.hosted_zone }}:sub": "system:serviceaccount:kube-system:kube-ingress-aws-controller"
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action: 'acm:ListCertificates'
                Effect: Allow
                Resource: '*'
              - Action: 'acm:GetCertificate'
                Effect: Allow
                Resource: '*'
              - Action: 'acm:DescribeCertificate'
                Effect: Allow
                Resource: '*'
              - Action: 'autoscaling:DescribeAutoScalingGroups'
                Effect: Allow
                Resource: '*'
              - Action: 'autoscaling:AttachLoadBalancers'
                Effect: Allow
                Resource: '*'
              - Action: 'autoscaling:DetachLoadBalancers'
                Effect: Allow
                Resource: '*'
              - Action: 'autoscaling:DetachLoadBalancerTargetGroups'
                Effect: Allow
                Resource: '*'
              - Action: 'autoscaling:AttachLoadBalancerTargetGroups'
                Effect: Allow
                Resource: '*'
              - Action: 'autoscaling:DescribeLoadBalancerTargetGroups'
                Effect: Allow
                Resource: '*'
              - Action: 'cloudformation:*'
                Effect: Allow
                Resource: '*'
              - Action: 'elasticloadbalancing:*'
                Effect: Allow
                Resource: '*'
              - Action: 'elasticloadbalancingv2:*'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:DescribeInstances'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:DescribeSubnets'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:DescribeSecurityGroups'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:DescribeRouteTables'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:DescribeVpcs'
                Effect: Allow
                Resource: '*'
              - Action: 'iam:GetServerCertificate'
                Effect: Allow
                Resource: '*'
              - Action: 'iam:ListServerCertificates'
                Effect: Allow
                Resource: '*'
              - Action: 'waf-regional:ListWebACLs'
                Effect: Allow
                Resource: '*'
              - Action: 'waf-regional:GetWebACL'
                Effect: Allow
                Resource: '*'
              - Action: 'waf-regional:GetWebACLForResource'
                Effect: Allow
                Resource: '*'
              - Action: 'waf-regional:AssociateWebACL'
                Effect: Allow
                Resource: '*'
              - Action: 'waf-regional:DisassociateWebACL'
                Effect: Allow
                Resource: '*'
              - Action: 'wafv2:ListWebACLs'
                Effect: Allow
                Resource: '*'
              - Action: 'wafv2:GetWebACL'
                Effect: Allow
                Resource: '*'
              - Action: 'wafv2:GetWebACLForResource'
                Effect: Allow
                Resource: '*'
              - Action: 'wafv2:AssociateWebACL'
                Effect: Allow
                Resource: '*'
              - Action: 'wafv2:DisassociateWebACL'
                Effect: Allow
                Resource: '*'
            Version: 2012-10-17
          PolicyName: root
      RoleName: "{{.Cluster.LocalID}}-app-ingr-ctrl"
    Type: 'AWS::IAM::Role'
  ClusterLifecycleControllerIAMRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Federated: "arn:aws:iam::{{ .Cluster.InfrastructureAccount | getAWSAccountID }}:oidc-provider/{{.Cluster.LocalID}}.{{.Values.hosted_zone}}"
          Action:
            - 'sts:AssumeRoleWithWebIdentity'
          Condition:
            StringEquals:
              "{{ .Cluster.LocalID }}.{{ .Values.hosted_zone }}:sub": "system:serviceaccount:kube-system:cluster-lifecycle-controller"
        Version: 2012-10-17
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action: 'ec2:DescribeInstanceStatus'
            Effect: Allow
            Resource: '*'
          - Action: 'ec2:TerminateInstances'
            Effect: Allow
            Resource: '*'
          - Action: 'autoscaling:DescribeAutoScalingGroups'
            Effect: Allow
            Resource: '*'
          - Action: 'autoscaling:DescribeAutoScalingInstances'
            Effect: Allow
            Resource: '*'
          - Action: 'autoscaling:DescribeLoadBalancers'
            Effect: Allow
            Resource: '*'
          - Action: 'autoscaling:DescribeLoadBalancerTargetGroups'
            Effect: Allow
            Resource: '*'
          - Action: 'autoscaling:DescribeTags'
            Effect: Allow
            Resource: '*'
          - Action: 'autoscaling:SetDesiredCapacity'
            Effect: Allow
            Resource: '*'
          - Action: 'elasticloadbalancing:DescribeInstanceHealth'
            Effect: Allow
            Resource: '*'
          - Action: 'elasticloadbalancing:DescribeTargetHealth'
            Effect: Allow
            Resource: '*'
          - Action: 'autoscaling:TerminateInstanceInAutoScalingGroup'
            Effect: Allow
            Resource: '*'
          Version: 2012-10-17
        PolicyName: root
      RoleName: "{{.Cluster.LocalID}}-cluster-lifecycle-controller"
    Type: 'AWS::IAM::Role'
  KubeReadyIAMRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Federated: "arn:aws:iam::{{ .Cluster.InfrastructureAccount | getAWSAccountID }}:oidc-provider/{{.Cluster.LocalID}}.{{.Values.hosted_zone}}"
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                "{{ .Cluster.LocalID }}.{{ .Values.hosted_zone }}:sub": "system:serviceaccount:kube-system:kube-node-ready"
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::{{.Cluster.InfrastructureAccount | getAWSAccountID}}:role/'
                  - !Ref MasterIAMRole
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action: 'autoscaling:Describe*'
                Effect: Allow
                Resource: '*'
              - Action: 'autoscaling:CompleteLifecycleAction'
                Effect: Allow
                Resource: '*'
              - Action: 'sts:AssumeRole'
                Effect: Allow
                Resource: '*'
            Version: 2012-10-17
          PolicyName: root
      RoleName: "{{.Cluster.LocalID}}-kube-node-ready"
    Type: 'AWS::IAM::Role'
  MasterIAMRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action: 'ec2:*'
                Effect: Allow
                Resource: '*'
              # CLC
              - Action: 'ec2:DescribeInstanceStatus'
                Effect: Allow
                Resource: '*'
              - Action: 'autoscaling:DescribeAutoScalingGroups'
                Effect: Allow
                Resource: '*'
              - Action: 'autoscaling:DescribeAutoScalingInstances'
                Effect: Allow
                Resource: '*'
              - Action: 'autoscaling:DescribeLoadBalancers'
                Effect: Allow
                Resource: '*'
              - Action: 'autoscaling:SetDesiredCapacity'
                Effect: Allow
                Resource: '*'
              - Action: 'elasticloadbalancing:DescribeInstanceHealth'
                Effect: Allow
                Resource: '*'
              - Action: 'autoscaling:TerminateInstanceInAutoScalingGroup'
                Effect: Allow
                Resource: '*'
              # End CLC
              - Action: 'elasticloadbalancing:*'
                Effect: Allow
                Resource: '*'
              - Action: 'kms:Decrypt'
                Effect: Allow
                Resource: '*'
              - Action: 's3:GetObject'
                Effect: Allow
                Resource: 'arn:aws:s3:::*'
              - Action:
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:BatchGetImage'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:GetAuthorizationToken'
                Effect: Allow
                Resource: '*'
              # allow connecting via Session Manager
              - Action:
                - "ssm:UpdateInstanceInformation"
                - "ssmmessages:CreateControlChannel"
                - "ssmmessages:CreateDataChannel"
                - "ssmmessages:OpenControlChannel"
                - "ssmmessages:OpenDataChannel"
                Effect: Allow
                Resource: "*"
            Version: 2012-10-17
          PolicyName: root
    Type: 'AWS::IAM::Role'
  ETCDS3BackupIAMRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Federated: "arn:aws:iam::{{ .Cluster.InfrastructureAccount | getAWSAccountID }}:oidc-provider/{{.Cluster.LocalID}}.{{.Values.hosted_zone}}"
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                "{{ .Cluster.LocalID }}.{{ .Values.hosted_zone }}:sub": "system:serviceaccount:kube-system:etcd-backup"
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::{{.Cluster.InfrastructureAccount | getAWSAccountID}}:role/'
                  - !Ref MasterIAMRole
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 's3:ListBucket'
                Effect: Allow
                Resource:
                  - >-
                    arn:aws:s3:::{{.Cluster.ConfigItems.etcd_s3_backup_bucket}}
              - Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:DeleteObject'
                Effect: Allow
                Resource:
                  - >-
                    arn:aws:s3:::{{.Cluster.ConfigItems.etcd_s3_backup_bucket}}/*
            Version: 2012-10-17
          PolicyName: root
      RoleName: "{{.Cluster.LocalID}}-etcd-backup"
    Type: 'AWS::IAM::Role'
  StaticEgressControllerIAMRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Federated: "arn:aws:iam::{{ .Cluster.InfrastructureAccount | getAWSAccountID }}:oidc-provider/{{.Cluster.LocalID}}.{{.Values.hosted_zone}}"
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                "{{ .Cluster.LocalID }}.{{ .Values.hosted_zone }}:sub": "system:serviceaccount:kube-system:kube-static-egress-controller"
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action: 'cloudformation:*'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:AllocateAddress'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:AssociateRouteTable'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:DisassociateRouteTable'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:CreateRouteTable'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:CreateRoute'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:CreateNatGateway'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:CreateSubnet'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:CreateTags'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:DeleteTags'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:ReleaseAddress'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:DeleteRouteTable'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:DeleteRoute'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:DeleteNatGateway'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:DeleteSubnet'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:DescribeAddresses'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:DescribeInternetGateways'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:DescribeRouteTables'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:DescribeNatGateways'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:DescribeSubnets'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:DescribeVpcs'
                Effect: Allow
                Resource: '*'
            Version: 2012-10-17
          PolicyName: root
      RoleName: "{{.Cluster.LocalID}}-static-egress-controller"
    Type: 'AWS::IAM::Role'
  ZmonIAMRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::{{.Cluster.InfrastructureAccount | getAWSAccountID}}:role/'
                  - !Ref WorkerIAMRole
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              AWS: '{{.Cluster.ConfigItems.zmon_root_account_role}}'
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action: 'acm:DescribeCertificate'
                Effect: Allow
                Resource: '*'
              - Action: 'acm:ListCertificates'
                Effect: Allow
                Resource: '*'
              - Action: 'autoscaling:Describe*'
                Effect: Allow
                Resource: '*'
              - Action: 'cloudformation:Describe*'
                Effect: Allow
                Resource: '*'
              - Action: 'cloudformation:List*'
                Effect: Allow
                Resource: '*'
              - Action: 'cloudwatch:Describe*'
                Effect: Allow
                Resource: '*'
              - Action: 'cloudwatch:Get*'
                Effect: Allow
                Resource: '*'
              - Action: 'cloudwatch:List*'
                Effect: Allow
                Resource: '*'
              - Action: 'ec2:Describe*'
                Effect: Allow
                Resource: '*'
              - Action: 'elasticache:Describe*'
                Effect: Allow
                Resource: '*'
              - Action: 'elasticloadbalancing:Describe*'
                Effect: Allow
                Resource: '*'
              - Action: 'iam:Get*'
                Effect: Allow
                Resource: '*'
              - Action: 'iam:List*'
                Effect: Allow
                Resource: '*'
              - Action: 'kinesis:Describe*'
                Effect: Allow
                Resource: '*'
              - Action: 'opsworks:Describe*'
                Effect: Allow
                Resource: '*'
              - Action: 'rds:Describe*'
                Effect: Allow
                Resource: '*'
              - Action: 'rds:ListTagsForResource'
                Effect: Allow
                Resource: '*'
              - Action: 'route53:Get*'
                Effect: Allow
                Resource: '*'
              - Action: 'route53:List*'
                Effect: Allow
                Resource: '*'
              - Action: 'tag:Get*'
                Effect: Allow
                Resource: '*'
              - Action: 'dynamodb:ListTables'
                Effect: Allow
                Resource: '*'
              - Action: 'dynamodb:DescribeTable'
                Effect: Allow
                Resource: '*'
              - Action: 's3:ListBucket'
                Effect: Allow
                Resource: '*'
          {{if ne "" .Cluster.ConfigItems.zmon_accessible_s3_buckets}}
              {{range $bucket := split .Cluster.ConfigItems.zmon_accessible_s3_buckets ","}}
              - Action: 's3:GetObject'
                Effect: Allow
                Resource: 'arn:aws:s3:::{{ $bucket }}/*'
              {{end}}
          {{end}}
              - Action: 'sqs:GetQueueAttributes'
                Effect: Allow
                Resource: '*'
              - Action: 'sqs:ListDeadLetterSourceQueues'
                Effect: Allow
                Resource: '*'
              - Action: 'sqs:ListQueues'
                Effect: Allow
                Resource: '*'
              - Action: 'servicequotas:ListServiceQuotas'
                Effect: Allow
                Resource: '*'
              - Action: 'sts:AssumeRole'
                Effect: Allow
                Resource: '*'
              - Action: 'sagemaker:DescribeEndpoint'
                Effect: Allow
                Resource: '*'
              - Action: 'sagemaker:ListEndpoints'
                Effect: Allow
                Resource: '*'
              - Action: 'states:ListStateMachines'
                Effect: Allow
                Resource: '*'
              - Action: 'states:ListExecutions'
                Effect: Allow
                Resource: '*'
            Version: 2012-10-17
          PolicyName: root
      RoleName: "{{.Cluster.LocalID}}-app-zmon"
    Type: 'AWS::IAM::Role'

  LoggingAgentIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "{{.Cluster.LocalID}}-app-logging-agent"
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
          - Action: ["sts:AssumeRole"]
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::{{.Cluster.InfrastructureAccount | getAWSAccountID}}:role/'
                  - !Ref WorkerIAMRole
          - Action: ["sts:AssumeRole"]
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::{{.Cluster.InfrastructureAccount | getAWSAccountID}}:role/'
                  - !Ref MasterIAMRole
          - Effect: Allow
            Principal:
              Federated: "arn:aws:iam::{{ .Cluster.InfrastructureAccount | getAWSAccountID }}:oidc-provider/{{.Cluster.LocalID}}.{{.Values.hosted_zone}}"
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                "{{ .Cluster.LocalID }}.{{ .Values.hosted_zone }}:sub": "system:serviceaccount:visibility:logging-agent"
      Policies:
        - PolicyName: AllowS3BucketAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Action: ["s3:ListBucket"]
              Effect: "Allow"
              Resource: 'arn:aws:s3:::{{.Cluster.ConfigItems.logging_s3_bucket}}'
            - Action: ["s3:GetObject"]
              Effect: "Allow"
              Resource: 'arn:aws:s3:::{{.Cluster.ConfigItems.logging_s3_bucket}}/*'
            - Action: ["s3:PutObject"]
              Effect: "Allow"
              Resource: 'arn:aws:s3:::{{.Cluster.ConfigItems.logging_s3_bucket}}/*'
{{- if ne .Cluster.ConfigItems.logging_infrastructure_s3_bucket "" }}
        - PolicyName: AllowCentralTelemetryInfrastructureS3BucketAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Action: ["s3:ListBucket"]
              Effect: "Allow"
              Resource: 'arn:aws:s3:::{{.Cluster.ConfigItems.logging_infrastructure_s3_bucket}}'
            - Action: ["s3:GetObject", "s3:PutObject", "s3:PutObjectAcl"]
              Effect: "Allow"
              Resource: 'arn:aws:s3:::{{.Cluster.ConfigItems.logging_infrastructure_s3_bucket}}/*'
{{- end }}

  KubeMetricsIAMRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Federated: "arn:aws:iam::{{ .Cluster.InfrastructureAccount | getAWSAccountID }}:oidc-provider/{{.Cluster.LocalID}}.{{.Values.hosted_zone}}"
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                "{{ .Cluster.LocalID }}.{{ .Values.hosted_zone }}:sub": "system:serviceaccount:kube-system:custom-metrics-apiserver"
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action: 'sqs:GetQueueUrl'
                Effect: Allow
                Resource: '*'
              - Action: 'sqs:GetQueueAttributes'
                Effect: Allow
                Resource: '*'
              - Action: 'sqs:ListQueues'
                Effect: Allow
                Resource: '*'
              - Action: 'sqs:ListQueueTags'
                Effect: Allow
                Resource: '*'
            Version: 2012-10-17
          PolicyName: root
      RoleName: "{{.Cluster.LocalID}}-kube-metrics-adapter"
    Type: 'AWS::IAM::Role'

  EBSCSIControllerIAMRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Federated: "arn:aws:iam::{{ .Cluster.InfrastructureAccount | getAWSAccountID }}:oidc-provider/{{.Cluster.LocalID}}.{{.Values.hosted_zone}}"
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                "{{ .Cluster.LocalID }}.{{ .Values.hosted_zone }}:sub": "system:serviceaccount:kube-system:ebs-csi-controller"
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::{{.Cluster.InfrastructureAccount | getAWSAccountID}}:role/'
                  - !Ref MasterIAMRole
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::{{.Cluster.InfrastructureAccount | getAWSAccountID}}:role/'
                  - !Ref WorkerIAMRole
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Effect: Allow # All the policies needed for the EBS CSI driver
                Action:
                  - 'ec2:AttachVolume'
                  - 'ec2:CreateSnapshot'
                  - 'ec2:CreateTags'
                  - 'ec2:CreateVolume'
                  - 'ec2:DeleteSnapshot'
                  - 'ec2:DeleteTags'
                  - 'ec2:DeleteVolume'
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeSnapshots'
                  - 'ec2:DescribeTags'
                  - 'ec2:DescribeVolumes'
                  - 'ec2:DetachVolume'
                  - 'ec2:ModifyVolume'
                Resource: '*'
            Version: 2012-10-17
          PolicyName: root
      RoleName: "{{.Cluster.LocalID}}-ebs-csi-controller"
    Type: 'AWS::IAM::Role'

  {{ if eq .Cluster.Environment "e2e" }}
# This is a hack to easily create an aws iam role and s3 bucket for testing
  # AWS IAM intergration in e2e tests.
  E2EAWSIAMTestRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        - Action:
          - 'sts:AssumeRole'
          Effect: Allow
          Principal:
            AWS: !Join
              - ''
              - - 'arn:aws:iam::{{.Cluster.InfrastructureAccount | getAWSAccountID}}:role/'
                - !Ref WorkerIAMRole
        Version: 2012-10-17
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - 's3:ListBucket'
            Effect: Allow
            Resource:
            - >-
              arn:aws:s3:::zalando-e2e-test-{{accountID .Cluster.InfrastructureAccount}}-{{.Cluster.LocalID}}
          - Action:
            - 's3:PutObject'
            - 's3:GetObject'
            - 's3:DeleteObject'
            Effect: Allow
            Resource:
            - >-
              arn:aws:s3:::zalando-e2e-test-{{accountID .Cluster.InfrastructureAccount}}-{{.Cluster.LocalID}}/*
          Version: 2012-10-17
        PolicyName: root
      RoleName: "{{.Cluster.LocalID}}-e2e-aws-iam-test"
    Type: 'AWS::IAM::Role'
  E2EAWSIAMTestBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: "zalando-e2e-test-{{accountID .Cluster.InfrastructureAccount}}-{{.Cluster.LocalID}}"
      LifecycleConfiguration:
        Rules:
        - AbortIncompleteMultipartUpload:
            DaysAfterInitiation: 1
          ExpirationInDays: 7
          NoncurrentVersionExpirationInDays: 1
          Prefix: ""
          Status: Enabled
      VersioningConfiguration:
        Status: Suspended
{{ end }}
  AuditTrailBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: "zalando-audittrail-{{accountID .Cluster.InfrastructureAccount}}-{{.Cluster.LocalID}}"
      LifecycleConfiguration:
        Rules:
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            ExpirationInDays: 14
            NoncurrentVersionExpirationInDays: 1
            Prefix: ""
            Status: Enabled
      VersioningConfiguration:
        Status: Suspended
      Tags:
      - Key: application
        Value: audittrail-adapter
      - Key: component
        Value: resend
  AuditTrailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AuditTrailBucket
      PolicyDocument:
        Statement:
          # In-cluster access
          - Action:
              - s3:ListBucket
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt EmergencyAccessServiceIAMRole.Arn
                - !GetAtt AudittrailAdapterIAMRole.Arn
            Resource:
              - !GetAtt AuditTrailBucket.Arn

          - Action:
              - s3:PutObject
            Effect: Allow
            Principal:
              AWS:
              - !GetAtt EmergencyAccessServiceIAMRole.Arn
              - !GetAtt AudittrailAdapterIAMRole.Arn
            Resource:
              - !Sub
                - "${BucketArn}/*"
                - BucketArn: !GetAtt AuditTrailBucket.Arn

{{- if ne .Cluster.ConfigItems.audittrail_root_account_role "" }}
          # Central access
          - Action:
              - s3:ListBucket
            Effect: Allow
            Principal:
              AWS:
                - {{.Cluster.ConfigItems.audittrail_root_account_role}}
            Resource:
              - !GetAtt AuditTrailBucket.Arn

          - Action:
              - s3:GetObject
              - s3:DeleteObject
            Effect: Allow
            Principal:
              AWS:
                - {{.Cluster.ConfigItems.audittrail_root_account_role}}
            Resource:
              - !Sub
                - "${BucketArn}/*"
                - BucketArn: !GetAtt AuditTrailBucket.Arn
{{- end }}

  AWSNodeDecommissionerIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: "{{.Cluster.LocalID}}-aws-node-decommissioner"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: "arn:aws:iam::{{ .Cluster.InfrastructureAccount | getAWSAccountID }}:oidc-provider/{{.Cluster.LocalID}}.{{.Values.hosted_zone}}"
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                "{{ .Cluster.LocalID }}.{{ .Values.hosted_zone }}:sub": "system:serviceaccount:kube-system:aws-node-decommissioner"
      Path: /
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
              - "ec2:DescribeInstances"
              - "ec2:DescribeInstanceStatus"
              Resource: "*"
          PolicyName: root
  EmergencyAccessServiceIAMRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Federated: "arn:aws:iam::{{ .Cluster.InfrastructureAccount | getAWSAccountID }}:oidc-provider/{{.Cluster.LocalID}}.{{.Values.hosted_zone}}"
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                "{{ .Cluster.LocalID }}.{{ .Values.hosted_zone }}:sub": "system:serviceaccount:kube-system:emergency-access-service"
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:ListBucket
                Effect: Allow
                Resource:
                  - !GetAtt AuditTrailBucket.Arn

              - Action:
                  - s3:PutObject
                Effect: Allow
                Resource:
                  - !Sub
                    - "${BucketArn}/*"
                    - BucketArn: !GetAtt AuditTrailBucket.Arn
            Version: 2012-10-17
          PolicyName: root
      RoleName: "{{.Cluster.LocalID}}-emergency-access-service"
    Type: 'AWS::IAM::Role'
  AudittrailAdapterIAMRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Federated: "arn:aws:iam::{{ .Cluster.InfrastructureAccount | getAWSAccountID }}:oidc-provider/{{.Cluster.LocalID}}.{{.Values.hosted_zone}}"
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                "{{ .Cluster.LocalID }}.{{ .Values.hosted_zone }}:sub": "system:serviceaccount:kube-system:audittrail-adapter"
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:ListBucket
                Effect: Allow
                Resource:
                  - !GetAtt AuditTrailBucket.Arn

              - Action:
                  - s3:PutObject
                Effect: Allow
                Resource:
                  - !Sub
                    - "${BucketArn}/*"
                    - BucketArn: !GetAtt AuditTrailBucket.Arn
            Version: 2012-10-17
          PolicyName: root
      RoleName: "{{.Cluster.LocalID}}-audittrail-adapter"
    Type: 'AWS::IAM::Role'
{{- if eq .Cluster.ConfigItems.dynamodb_service_link_enabled "true" }}
  ServiceLinkedRoleAutoScalingDynamoDB:
    Properties:
      AWSServiceName: "dynamodb.application-autoscaling.amazonaws.com"
      Description: "AWS service role for application autoscaling DynamoDB"
    Type: "AWS::IAM::ServiceLinkedRole"
{{- end }}
  ServiceLinkedRoleServiceQuotas:
    Properties:
      AWSServiceName: "servicequotas.amazonaws.com"
      Description: "AWS service role for Service Quotas"
    Type: "AWS::IAM::ServiceLinkedRole"
  RemoteFilesEncryptionKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: The master key for encryption of remote files
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: "remote-files-encryption-key"
        Statement:
          - Sid: "Enable IAM User Permissions"
            Effect: "Allow"
            Principal:
              AWS: "arn:aws:iam::{{ .Cluster.InfrastructureAccount | getAWSAccountID }}:root"
            Action:
            - "kms:DescribeKey"
            Resource: "*"
          - Sid: "Allow administering the key"
            Effect: "Allow"
            Principal:
              AWS:
                - "arn:aws:iam::{{.Cluster.InfrastructureAccount | getAWSAccountID}}:role/cluster-lifecycle-manager-entrypoint"
                - "arn:aws:iam::{{.Cluster.InfrastructureAccount | getAWSAccountID}}:role/Shibboleth-Administrator"
            Action:
            - "kms:*"
            Resource: "*"
          - Sid: "Enable master and worker nodes to decrypt the remote files"
            Effect: "Allow"
            Principal:
              AWS:
                - "Fn::GetAtt":
                  - "MasterIAMRole"
                  - "Arn"
                - "Fn::GetAtt":
                  - "WorkerIAMRole"
                  - "Arn"
            Resource: "*"
            Action:
            - "kms:Decrypt"
  EtcdEncryptionKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: The KMS key for encryption of secrets in etcd
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: "etcd-key-policy"
        Statement:
          - Sid: "Allow CLM to manage this key"
            Effect: "Allow"
            Principal:
              AWS: "arn:aws:iam::{{.Cluster.InfrastructureAccount | getAWSAccountID}}:role/cluster-lifecycle-manager-entrypoint"
            Action: "kms:*"
            Resource: "*"
          - Sid: "Allow Administrator to manage and use this key"
            Effect: "Allow"
            Principal:
              AWS: "arn:aws:iam::{{ .Cluster.InfrastructureAccount | getAWSAccountID }}:role/Shibboleth-Administrator"
            Action: "kms:*"
            Resource: "*"
          - Sid: "Enable master nodes to encrypt and decrypt secrets in etcd"
            Effect: "Allow"
            Principal:
              AWS:
                - "Fn::GetAtt":
                  - "MasterIAMRole"
                  - "Arn"
            Resource: "*"
            Action:
            - "kms:Encrypt"
            - "kms:Decrypt"
  MasterFilesEncryptionKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: The KMS key for encryption of remote files for master nodes
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: "master-key-policy"
        Statement:
          - Sid: "Enable IAM User Permissions"
            Effect: "Allow"
            Principal:
              AWS: "arn:aws:iam::{{ .Cluster.InfrastructureAccount | getAWSAccountID }}:root"
            Action:
            - "kms:DescribeKey"
            Resource: "*"
          - Sid: "Allow administering the key"
            Effect: "Allow"
            Principal:
              AWS:
                - "arn:aws:iam::{{.Cluster.InfrastructureAccount | getAWSAccountID}}:role/cluster-lifecycle-manager-entrypoint"
                - "arn:aws:iam::{{.Cluster.InfrastructureAccount | getAWSAccountID}}:role/Shibboleth-Administrator"
            Action:
            - "kms:*"
            Resource: "*"
          - Sid: "Enable master nodes to decrypt the remote files"
            Effect: "Allow"
            Principal:
              AWS:
                - "Fn::GetAtt":
                  - "MasterIAMRole"
                  - "Arn"
            Resource: "*"
            Action:
            - "kms:Decrypt"
  WorkerFilesEncryptionKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: The KMS key for encryption of remote files for worker nodes
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: "worker-key-policy"
        Statement:
          - Sid: "Enable IAM User Permissions"
            Effect: "Allow"
            Principal:
              AWS: "arn:aws:iam::{{ .Cluster.InfrastructureAccount | getAWSAccountID }}:root"
            Action:
            - "kms:DescribeKey"
            Resource: "*"
          - Sid: "Allow administering the key"
            Effect: "Allow"
            Principal:
              AWS:
                - "arn:aws:iam::{{.Cluster.InfrastructureAccount | getAWSAccountID}}:role/cluster-lifecycle-manager-entrypoint"
                - "arn:aws:iam::{{.Cluster.InfrastructureAccount | getAWSAccountID}}:role/Shibboleth-Administrator"
            Action:
            - "kms:*"
            Resource: "*"
          - Sid: "Enable worker nodes to decrypt the remote files"
            Effect: "Allow"
            Principal:
              AWS:
                - "Fn::GetAtt":
                  - "WorkerIAMRole"
                  - "Arn"
            Resource: "*"
            Action:
            - "kms:Decrypt"
Outputs:
  MasterIAMRole:
    Export:
      Name: '{{.Cluster.ID}}:master-iam-role'
    Value: !Ref MasterIAMRole
  WorkerIAMRole:
    Export:
      Name: '{{.Cluster.ID}}:worker-iam-role'
    Value: !Ref WorkerIAMRole
  RemoteFilesEncryptionKey:
    Export:
      Name: '{{ .Cluster.ID}}:remote-files-encryption-key'
    Value: !Ref RemoteFilesEncryptionKey
  WorkerFilesEncryptionKey:
    Export:
      Name: '{{ .Cluster.ID}}:worker-files-encryption-key'
    Value: !Ref WorkerFilesEncryptionKey
  MasterFilesEncryptionKey:
    Export:
      Name: '{{ .Cluster.ID}}:master-files-encryption-key'
    Value: !Ref MasterFilesEncryptionKey
{{- if ne .Cluster.ConfigItems.delete_vpc_resources "true" }}
  MasterLoadBalancerNLBTargetGroup:
    Export:
      Name: '{{.Cluster.ID}}:master-load-balancer-nlb-target-group'
    Value: !Ref MasterLoadBalancerNLBTargetGroup
  MasterSecurityGroup:
    Export:
      Name: '{{.Cluster.ID}}:master-security-group'
    Value: !Ref MasterSecurityGroup
  WorkerSecurityGroup:
    Export:
      Name: '{{.Cluster.ID}}:worker-security-group'
    Value: !Ref WorkerSecurityGroup
{{- end }}
  EtcdEncryptionKey:
    Export:
      Name: '{{ .Cluster.ID}}:etcd-encryption-key'
    Value: !Ref EtcdEncryptionKey
