SenzaComponents:
- Configuration:
    Type: Senza::StupsAutoConfiguration
    DefineParameters: false # skip CF template parameter definition
- AppServer:
    IamRoles:
    - Ref: EtcdRole
    InstanceType: '{{Arguments.InstanceType}}'
    AssociatePublicIpAddress: true
    VPCZoneIdentifier:
      Fn::FindInMap:
        - LoadBalancerSubnets
        - Ref: AWS::Region
        - Subnets
    SecurityGroups:
    - Fn::GetAtt:
      - EtcdSecurityGroup
      - GroupId
    TaupageConfig:
      ports:
        2379: 2379
        2479: 2479
        2380: 2380
        2381: 2381
      runtime: Docker
      source: '{{Arguments.EtcdImage}}'
      environment:
        HOSTED_ZONE: '{{Arguments.HostedZone}}'
        CLIENT_TRUSTED_CA: '{{Arguments.ClientCACertificate}}'
        CLIENT_CERT: '{{Arguments.ClientCertificate}}'
        CLIENT_KEY: '{{Arguments.ClientKey}}'
        CLIENT_TLS_ENABLED: '{{Arguments.ClientTLSEnabled}}'
      scalyr_account_key: '{{Arguments.ScalyrAccountKey}}'
      mounts:
        /home/etcd:
          partition: none
          filesystem: tmpfs
          erase_on_boot: false
          options: size=2g
    Type: Senza::TaupageAutoScalingGroup
    AutoScaling:
      Minimum: "{{Arguments.InstanceCount}}"
      Maximum: "{{Arguments.InstanceCount}}"
    Tags:
    - Key: "kubernetes:component"
      Value: "etcd-cluster"
    - Key: InfrastructureComponent
      Value: true

SenzaInfo:
  Parameters:
  - HostedZone:
      Description: AWS Hosted Zone to work with
  - InstanceCount:
      Description: Instance number in ASG
      Default: 5
  - InstanceType:
      Description: Instance Type
      Default: "t2.medium"
  - EtcdS3Backup:
      Description: AWS S3 Bucket to backup ETCD to
  - NetworkCIDR:
      Description: Network CIDR used for the Security Group configuration.
      Default: "172.32.0.0/16"
  - KMSKey:
      Description: KMS key to use for decrypting configuration data
  - ScalyrAccountKey:
      Description: Scalyr account key
  - VpcID:
      Description: VpcID to use for the security groups being setup.
  - EtcdImage:
      Description: Docker image for the etcd instances.
      Default: "registry.opensource.zalan.do/teapot/etcd-cluster:3.4.14-master-5"
  - ClientCACertificate:
      Description: "CA certificate for client-side TLS (empty for no TLS support)"
      Default: ""
  - ClientKey:
      Description: "Key for client-side TLS (empty for no TLS support)"
      Default: ""
  - ClientCertificate:
      Description: "Certificate for client-side TLS (empty for no TLS support)"
      Default: ""
  - ClientTLSEnabled:
      Description: "Whether to enable client-side TLS"
      Default: "false"
  StackName: etcd-cluster

Outputs:
  EtcdSecurityGroupId:
    Description: "Security Group ID of the etcd cluster"
    Value:
      Fn::GetAtt:
        - EtcdSecurityGroup
        - GroupId
    Export:
      Name: "{{SenzaInfo.StackName}}-{{SenzaInfo.StackVersion}}:security-group-id"

Resources:
  EtcdSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Etcd Appliance Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: "{{Arguments.NetworkCIDR}}"
      - IpProtocol: tcp
        FromPort: 2381
        ToPort: 2381
        CidrIp: "{{Arguments.NetworkCIDR}}"
      - IpProtocol: tcp
        FromPort: 9100
        ToPort: 9100
        CidrIp: "{{Arguments.NetworkCIDR}}"
      VpcId: "{{Arguments.VpcID}}"
      Tags:
        - Key: InfrastructureComponent
          Value: true
  EtcdIngressMembers:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId:
        Fn::GetAtt:
          - EtcdSecurityGroup
          - GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId:
        Fn::GetAtt:
          - EtcdSecurityGroup
          - GroupId
  EtcdBackupBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: "{{Arguments.EtcdS3Backup}}"
      LifecycleConfiguration:
        Rules:
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            ExpirationInDays: 2
            NoncurrentVersionExpirationInDays: 1
            Prefix: ""
            Status: Enabled
      VersioningConfiguration:
        Status: Suspended
  EtcdRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: AmazonEC2ReadOnlyAccess
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
              - ec2:Describe*
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:RevokeSecurityGroupIngress
            Resource: "*"
          - Effect: Allow
            Action: autoscaling:Describe*
            Resource: "*"
      - PolicyName: AmazonRoute53Access
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - route53:ListHostedZonesByName
            - route53:ChangeResourceRecordSets
            - route53:GetHostedZone
            - route53:ListResourceRecordSets
            - route53:GetChange
            Resource: "*"
      - PolicyName: AmazonS3EtcdBackupWrite
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject
            Resource: [ "arn:aws:s3:::{{Arguments.EtcdS3Backup}}/*" ]
      - PolicyName: KMSDecrypt
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action: ["kms:Decrypt"]
            Resource: ["{{Arguments.KMSKey}}"]
