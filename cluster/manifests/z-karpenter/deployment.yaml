{{ if eq .Cluster.ConfigItems.karpenter_pools_enabled "true"}}
---
# Source: karpenter/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: karpenter
  namespace: kube-system
  labels:
    application: kubernetes
    component: karpenter
spec:
  replicas: 2
  revisionHistoryLimit: 10
  strategy:
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      deployment: karpenter
  template:
    metadata:
      labels:
        deployment: karpenter
        application: kubernetes
        component: karpenter
      annotations:
        logging/destination: "{{.Cluster.ConfigItems.log_destination_infra}}"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
        prometheus.io/scheme: "http"
        prometheus.io/scrape: "true"
    spec:
      dnsPolicy: Default
      serviceAccountName: karpenter
      securityContext:
        fsGroup: 65536
      priorityClassName: "{{ .Cluster.ConfigItems.system_priority_class }}"
      dnsPolicy: ClusterFirst
      containers:
        - name: controller
          securityContext:
            runAsUser: 65536
            runAsGroup: 65536
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
          {{if eq .Cluster.ConfigItems.karpenter_version "current"}}
          image: "container-registry.zalando.net/teapot/karpenter:0.37.0-main-26.patched"
          {{else if eq .Cluster.ConfigItems.karpenter_version "legacy"}}
          image: "container-registry.zalando.net/teapot/karpenter:0.36.2-main-25.patched"
          {{end}}
          imagePullPolicy: IfNotPresent
          env:
            - name: KUBERNETES_MIN_VERSION
              value: 1.22.0-0
            - name: AWS_REGION
              value: "{{ .Cluster.Region }}"
            - name: CLUSTER_ENDPOINT
              value: https://kubernetes.default.svc.cluster.local.
            - name: ENABLE_PROFILING
              value: 'false'
            - name: INTERRUPTION_QUEUE
              value: "{{.Cluster.LocalID}}-karpenter-interruption-queue"
            - name: ISOLATED_VPC
              value: "false"
            - name: KARPENTER_SERVICE
              value: karpenter
            - name: LOG_LEVEL
              value: {{ .Cluster.ConfigItems.karpenter_log_level }}
            - name: METRICS_PORT
              value: "8000"
            - name: HEALTH_PROBE_PORT
              value: "8081"
            - name: SYSTEM_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MEMORY_LIMIT
              valueFrom:
                resourceFieldRef:
                  containerName: controller
                  divisor: "0"
                  resource: limits.memory
            - name: FEATURE_GATES
              value: "Drift=false,SpotToSpotConsolidation=true"
            - name: BATCH_MAX_DURATION
              value: "10s"
            - name: BATCH_IDLE_DURATION
              value: "1s"
            - name: ASSUME_ROLE_DURATION
              value: "15m"
            - name: CLUSTER_NAME
              value: "{{.Cluster.ID}}"
            - name: VM_MEMORY_OVERHEAD_PERCENT
              value: "0.075"
            - name: RESERVED_ENIS
              value: "0"
            {{ $pod_cidr_size := "15" }}
            - name: MAX_NODE_CLAIMS
              value: "{{ nodeCIDRMaxNodesPodCIDR (parseInt64 $pod_cidr_size) (parseInt64 .Cluster.ConfigItems.node_cidr_mask_size) (parseInt64 .Cluster.ConfigItems.reserved_nodes) }}"
          ports:
            - name: http-metrics
              containerPort: 8000
              protocol: TCP
            - name: http
              containerPort: 8081
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 30
            timeoutSeconds: 30
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            initialDelaySeconds: 5
            timeoutSeconds: 30
            httpGet:
              path: /readyz
              port: http
          resources:
            requests:
              cpu: "{{ .Cluster.ConfigItems.karpenter_controller_cpu }}"
              memory: "{{ .Cluster.ConfigItems.karpenter_controller_memory }}"
            limits:
              cpu: "{{ .Cluster.ConfigItems.karpenter_controller_cpu }}"
              memory: "{{ .Cluster.ConfigItems.karpenter_controller_memory }}"
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 50
              preference:
                matchExpressions:
                - key: karpenter.sh/nodepool
                  operator: DoesNotExist
            - weight: 100
              preference:
                matchExpressions:
                - key: node.kubernetes.io/role
                  operator: In
                  values:
                  - master
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                deployment: karpenter
            topologyKey: kubernetes.io/hostname
#      topologySpreadConstraints:
#        - labelSelector:
#            matchLabels:
#              deployment: karpenter
#          maxSkew: 1
#          topologyKey: topology.kubernetes.io/zone
#          whenUnsatisfiable: ScheduleAnyway
      tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - key: node.kubernetes.io/role
          value: master
          effect: NoSchedule
{{- if eq .Cluster.Provider "zalando-eks"}}
        - key: dedicated
          value: cluster-seed
          effect: NoSchedule
{{- end}}
{{ end }}
