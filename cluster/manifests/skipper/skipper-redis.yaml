apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    application: skipper-ingress
    component: redis
    version: v6.2.4
  name: skipper-ingress-redis
  namespace: kube-system
spec:
  replicas: {{ .ConfigItems.skipper_redis_replicas }}
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      statefulset: skipper-ingress-redis
  serviceName: skipper-ingress-redis
  template:
    metadata:
      labels:
        statefulset: skipper-ingress-redis
        application: skipper-ingress
        component: redis
        version: v6.2.4
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
        logging/destination: "{{.Cluster.ConfigItems.log_destination_infra}}"
    spec:
{{- if eq .ConfigItems.skipper_topology_spread_enabled "true" }}
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              # This is kind of stupid, but would work for now. Ideally we should just stop filtering out the pods in
              # kube-system in our admitters, since we've never really had any issues with them.
              parent-resource-hash: 97bcb33ef5bafb09bdbf83fc09c11e5f5fc84dad
{{- end }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: kubernetes.io/hostname
            labelSelector:
              matchExpressions:
              - key: application
                operator: In
                values:
                - skipper-ingress
              - key: component
                operator: In
                values:
                - redis
      priorityClassName: "{{ .Cluster.ConfigItems.system_priority_class }}"
      containers:
      - image: registry.opensource.zalan.do/library/redis-6-alpine:6-alpine-20210712
        name: skipper-ingress-redis
        args:
        - /usr/local/bin/docker-entrypoint.sh
        - --save
        - ""
        ports:
        - containerPort: 6379
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: {{ .Cluster.ConfigItems.skipper_redis_cpu }}
            memory: {{ .Cluster.ConfigItems.skipper_redis_memory }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
{{ if eq .ConfigItems.enable_dedicate_nodepool_skipper_redis "true"}}
      nodeSelector:
        dedicated: skipper-ingress-redis
      tolerations:
      - effect: NoSchedule
        key: dedicated
        value: skipper-ingress-redis
{{ end }}
